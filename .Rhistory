geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
# convert matrix to numeric
norm.counts[] <- sapply(norm.counts, as.numeric)
soft_power <- 12
temp_cor <- cor
cor <- WGCNA::cor
print("das")
cor <- temp_cor
# save(bwnet, file = "/Users/carlitos/Desktop/bwnet_GSE120012.RData")
# print("das")
load("./experimentos/GSE120012/bwnet_GSE120012.RData")
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet$MEs
# Print out a preview
head(module_eigengenes)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
color_table
barplot(color_table,
main = "Distribuição de Cores",
xlab = "Cores",
ylab = "Frequência",
col = names(color_table),
las = 2,
cex.names = 0.8)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# create traits file - binarize categorical variables
traits <- colData %>%
mutate(disease_state_bin = ifelse(grepl('CAWS', Treatment), 1, 0)) #%>% select(2)
# print(unique(traits))
# binarize categorical variables
unique(colData$Treatment)
colData$severity <- factor(colData$Treatment, levels = c("CAWS_challenged", "naive"  ))
severity.out <- binarizeCategoricalColumns(colData$severity,
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 1)
traits <- cbind(traits, severity.out)
rownames(traits) <- traits$SampleName
#traits <- traits %>% select(-1,-2,-3)
traits <- traits[, -c(1, 2, 3)]
head(traits)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
module.trait.corr.pvals
# visualize module-trait association as a heatmap
nrow(module_eigengenes)
nrow(traits)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
heatmap.data
colnames(heatmap.data)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
color_table
barplot(color_table,
main = "Distribuição de Cores",
xlab = "Cores",
ylab = "Frequência",
col = names(color_table),
las = 2,
cex.names = 0.8)
colnames(traits)
colnames(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:16],
y = names(heatmap.data)[1:14],rotLabX = 50,
col = c("blue1", "skyblue", "white", "pink", "red"))
# create traits file - binarize categorical variables
traits <- colData %>%
mutate(disease_state_bin = ifelse(grepl('CAWS', Treatment), 1, 0)) #%>% select(2)
# print(unique(traits))
# binarize categorical variables
unique(colData$Treatment)
colData$severity <- factor(colData$Treatment, levels = c("CAWS_challenged", "naive"  ))
severity.out <- binarizeCategoricalColumns(colData$severity,
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 1)
traits <- cbind(traits, severity.out)
rownames(traits) <- traits$SampleName
#traits <- traits %>% select(-1,-2,-3)
traits <- traits[, -c(1, 2, 3)]
head(traits)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
module.trait.corr.pvals
# visualize module-trait association as a heatmap
nrow(module_eigengenes)
nrow(traits)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
heatmap.data
colnames(heatmap.data)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
color_table
barplot(color_table,
main = "Distribuição de Cores",
xlab = "Cores",
ylab = "Frequência",
col = names(color_table),
las = 2,
cex.names = 0.8)
colnames(traits)
colnames(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:16],
y = names(heatmap.data)[1:14],rotLabX = 50,
col = c("blue1", "skyblue", "white", "pink", "red"))
cor <- temp_cor
# save(bwnet, file = "/Users/carlitos/Desktop/bwnet_GSE120012.RData")
# print("das")
load("./experimentos/GSE120012/bwnet_GSE120012.RData")
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet$MEs
# Print out a preview
head(module_eigengenes)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
color_table
barplot(color_table,
main = "Distribuição de Cores",
xlab = "Cores",
ylab = "Frequência",
col = names(color_table),
las = 2,
cex.names = 0.8)
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# create traits file - binarize categorical variables
traits <- colData %>%
mutate(disease_state_bin = ifelse(grepl('CAWS', Treatment), 1, 0)) #%>% select(2)
# print(unique(traits))
# binarize categorical variables
unique(colData$Treatment)
colData$severity <- factor(colData$Treatment, levels = c("CAWS_challenged", "naive"  ))
severity.out <- binarizeCategoricalColumns(colData$severity,
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 1)
traits <- cbind(traits, severity.out)
rownames(traits) <- traits$SampleName
#traits <- traits %>% select(-1,-2,-3)
traits <- traits[, -c(1, 2, 3)]
head(traits)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
module.trait.corr.pvals
# visualize module-trait association as a heatmap
nrow(module_eigengenes)
nrow(traits)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
heatmap.data
colnames(heatmap.data)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
color_table
barplot(color_table,
main = "Distribuição de Cores",
xlab = "Cores",
ylab = "Frequência",
col = names(color_table),
las = 2,
cex.names = 0.8)
colnames(traits)
colnames(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[15:16],
y = names(heatmap.data)[1:14],rotLabX = 50,
col = c("blue1", "skyblue", "white", "pink", "red"))
map_human_to_mouse <- function(entrez_ids, human_dataset = "hsapiens_gene_ensembl", mouse_dataset = "mmusculus_gene_ensembl") {
library(biomaRt)
# Conectar ao BioMart humano
ensembl_human <- useEnsembl(biomart = "genes", dataset = human_dataset)
# Obter o mapeamento humano de entrezgene_id para ensembl_gene_id
human_mapping <- getBM(
attributes = c("entrezgene_id", "ensembl_gene_id"),
filters = "entrezgene_id",
values = entrez_ids,
mart = ensembl_human
)
# Obter ortólogos de Mus musculus
orthologs <- getBM(
attributes = c("ensembl_gene_id", "mmusculus_homolog_associated_gene_name",
"mmusculus_homolog_ensembl_gene"),
filters = "ensembl_gene_id",
values = human_mapping$ensembl_gene_id,
mart = ensembl_human
)
# Combinar resultados humanos e ortólogos
combined_result <- merge(human_mapping, orthologs, by = "ensembl_gene_id")
# Conectar ao BioMart de Mus musculus
ensembl_mouse <- useEnsembl(biomart = "genes", dataset = mouse_dataset)
# Obter mapeamento de IDs Ensembl para IDs Entrez em Mus musculus
mouse_mapping <- getBM(
attributes = c("ensembl_gene_id", "entrezgene_id"),
filters = "ensembl_gene_id",
values = combined_result$mmusculus_homolog_ensembl_gene,
mart = ensembl_mouse
)
# Combinar com o resultado final
final_result <- merge(combined_result, mouse_mapping,
by.x = "mmusculus_homolog_ensembl_gene",
by.y = "ensembl_gene_id",
all.x = TRUE)
# Renomear a nova coluna
colnames(final_result)[ncol(final_result)] <- "mmusculus_homolog_entrezgene"
return(final_result)
}
library(ggplot2)
library(enrichplot)
library(clusterProfiler)
library(org.Mm.eg.db)
library(org.Hs.eg.db)  # Use o banco de dados apropriado para o seu organismo
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
result344 <- map_human_to_mouse(valores_interesse344)
df_table <- as.data.frame(table(colors_interesse), stringsAsFactors = FALSE)
colnames(df_table) <- c("Colors", "Frequency")
length(colors_interesse)
colors_interesse
length(valores_interesse)
valores_interesse
df_colors <- data.frame(genes = valores_interesse, Colors = colors_interesse, row.names = NULL)
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
View(genes344)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
result344 <- map_human_to_mouse(valores_interesse344)
library(ggplot2)
library(enrichplot)
library(clusterProfiler)
library(org.Mm.eg.db)
library(org.Hs.eg.db)  # Use o banco de dados apropriado para o seu organismo
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
result344 <- map_human_to_mouse(valores_interesse344)
valores_interesse344
print(result344)
install.packages("BiocManager")
BiocManager::install("biomaRt")
map_human_to_mouse <- function(entrez_ids, human_dataset = "hsapiens_gene_ensembl", mouse_dataset = "mmusculus_gene_ensembl") {
library(biomaRt)
# Conectar ao BioMart humano
ensembl_human <- useEnsembl(biomart = "genes", dataset = human_dataset)
# Obter o mapeamento humano de entrezgene_id para ensembl_gene_id
human_mapping <- getBM(
attributes = c("entrezgene_id", "ensembl_gene_id"),
filters = "entrezgene_id",
values = entrez_ids,
mart = ensembl_human
)
# Obter ortólogos de Mus musculus
orthologs <- getBM(
attributes = c("ensembl_gene_id", "mmusculus_homolog_associated_gene_name",
"mmusculus_homolog_ensembl_gene"),
filters = "ensembl_gene_id",
values = human_mapping$ensembl_gene_id,
mart = ensembl_human
)
# Combinar resultados humanos e ortólogos
combined_result <- merge(human_mapping, orthologs, by = "ensembl_gene_id")
# Conectar ao BioMart de Mus musculus
ensembl_mouse <- useEnsembl(biomart = "genes", dataset = mouse_dataset)
# Obter mapeamento de IDs Ensembl para IDs Entrez em Mus musculus
mouse_mapping <- getBM(
attributes = c("ensembl_gene_id", "entrezgene_id"),
filters = "ensembl_gene_id",
values = combined_result$mmusculus_homolog_ensembl_gene,
mart = ensembl_mouse
)
# Combinar com o resultado final
final_result <- merge(combined_result, mouse_mapping,
by.x = "mmusculus_homolog_ensembl_gene",
by.y = "ensembl_gene_id",
all.x = TRUE)
# Renomear a nova coluna
colnames(final_result)[ncol(final_result)] <- "mmusculus_homolog_entrezgene"
return(final_result)
}
library(ggplot2)
library(enrichplot)
library(clusterProfiler)
library(org.Mm.eg.db)
library(org.Hs.eg.db)  # Use o banco de dados apropriado para o seu organismo
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
result344 <- map_human_to_mouse(valores_interesse344)
setwd("/Users/carlitos/Desktop/RNA-seq/")
# setwd("/Users/carlitos/Documents/")
library(dplyr)
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
library(openxlsx)
library(org.Hs.eg.db)
map_human_to_mouse <- function(entrez_ids, human_dataset = "hsapiens_gene_ensembl", mouse_dataset = "mmusculus_gene_ensembl") {
library(biomaRt)
# Conectar ao BioMart humano
ensembl_human <- useEnsembl(biomart = "genes", dataset = human_dataset)
# Obter o mapeamento humano de entrezgene_id para ensembl_gene_id
human_mapping <- getBM(
attributes = c("entrezgene_id", "ensembl_gene_id"),
filters = "entrezgene_id",
values = entrez_ids,
mart = ensembl_human
)
# Obter ortólogos de Mus musculus
orthologs <- getBM(
attributes = c("ensembl_gene_id", "mmusculus_homolog_associated_gene_name",
"mmusculus_homolog_ensembl_gene"),
filters = "ensembl_gene_id",
values = human_mapping$ensembl_gene_id,
mart = ensembl_human
)
# Combinar resultados humanos e ortólogos
combined_result <- merge(human_mapping, orthologs, by = "ensembl_gene_id")
# Conectar ao BioMart de Mus musculus
ensembl_mouse <- useEnsembl(biomart = "genes", dataset = mouse_dataset)
# Obter mapeamento de IDs Ensembl para IDs Entrez em Mus musculus
mouse_mapping <- getBM(
attributes = c("ensembl_gene_id", "entrezgene_id"),
filters = "ensembl_gene_id",
values = combined_result$mmusculus_homolog_ensembl_gene,
mart = ensembl_mouse
)
# Combinar com o resultado final
final_result <- merge(combined_result, mouse_mapping,
by.x = "mmusculus_homolog_ensembl_gene",
by.y = "ensembl_gene_id",
all.x = TRUE)
# Renomear a nova coluna
colnames(final_result)[ncol(final_result)] <- "mmusculus_homolog_entrezgene"
return(final_result)
}
library(ggplot2)
library(enrichplot)
library(clusterProfiler)
library(org.Mm.eg.db)
library(org.Hs.eg.db)  # Use o banco de dados apropriado para o seu organismo
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
result344 <- map_human_to_mouse(valores_interesse344)
map_human_to_mouse <- function(entrez_ids, human_dataset = "hsapiens_gene_ensembl", mouse_dataset = "mmusculus_gene_ensembl") {
library(biomaRt)
# Conectar ao BioMart humano
# ensembl_human <- useEnsembl(biomart = "genes", dataset = human_dataset)
ensembl_human <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl", host = "https://www.ensembl.org")
# ensembl_mouse <- useEnsembl(biomart = "genes", dataset = "mmusculus_gene_ensembl", host = "https://www.ensembl.org")
# Obter o mapeamento humano de entrezgene_id para ensembl_gene_id
human_mapping <- getBM(
attributes = c("entrezgene_id", "ensembl_gene_id"),
filters = "entrezgene_id",
values = entrez_ids,
mart = ensembl_human
)
# Obter ortólogos de Mus musculus
orthologs <- getBM(
attributes = c("ensembl_gene_id", "mmusculus_homolog_associated_gene_name",
"mmusculus_homolog_ensembl_gene"),
filters = "ensembl_gene_id",
values = human_mapping$ensembl_gene_id,
mart = ensembl_human
)
# Combinar resultados humanos e ortólogos
combined_result <- merge(human_mapping, orthologs, by = "ensembl_gene_id")
# Conectar ao BioMart de Mus musculus
ensembl_mouse <- useEnsembl(biomart = "genes", dataset = mouse_dataset)
# Obter mapeamento de IDs Ensembl para IDs Entrez em Mus musculus
mouse_mapping <- getBM(
attributes = c("ensembl_gene_id", "entrezgene_id"),
filters = "ensembl_gene_id",
values = combined_result$mmusculus_homolog_ensembl_gene,
mart = ensembl_mouse
)
# Combinar com o resultado final
final_result <- merge(combined_result, mouse_mapping,
by.x = "mmusculus_homolog_ensembl_gene",
by.y = "ensembl_gene_id",
all.x = TRUE)
# Renomear a nova coluna
colnames(final_result)[ncol(final_result)] <- "mmusculus_homolog_entrezgene"
return(final_result)
}
library(ggplot2)
library(enrichplot)
library(clusterProfiler)
library(org.Mm.eg.db)
library(org.Hs.eg.db)  # Use o banco de dados apropriado para o seu organismo
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
result344 <- map_human_to_mouse(valores_interesse344)
# Função para mapear IDs Entrez humanos para ortólogos de Mus musculus
map_human_to_mouse <- function(entrez_ids, human_dataset = "hsapiens_gene_ensembl", mouse_dataset = "mmusculus_gene_ensembl") {
library(biomaRt)
# Conectar ao BioMart humano
ensembl_human <- useEnsembl(biomart = "genes", dataset = human_dataset)
# Obter o mapeamento humano de entrezgene_id para ensembl_gene_id
human_mapping <- getBM(
attributes = c("entrezgene_id", "ensembl_gene_id"),
filters = "entrezgene_id",
values = entrez_ids,
mart = ensembl_human
)
# Obter ortólogos de Mus musculus
orthologs <- getBM(
attributes = c("ensembl_gene_id", "mmusculus_homolog_associated_gene_name",
"mmusculus_homolog_ensembl_gene"),
filters = "ensembl_gene_id",
values = human_mapping$ensembl_gene_id,
mart = ensembl_human
)
# Combinar resultados humanos e ortólogos
combined_result <- merge(human_mapping, orthologs, by = "ensembl_gene_id")
# Conectar ao BioMart de Mus musculus
ensembl_mouse <- useEnsembl(biomart = "genes", dataset = mouse_dataset)
# Obter mapeamento de IDs Ensembl para IDs Entrez em Mus musculus
mouse_mapping <- getBM(
attributes = c("ensembl_gene_id", "entrezgene_id"),
filters = "ensembl_gene_id",
values = combined_result$mmusculus_homolog_ensembl_gene,
mart = ensembl_mouse
)
# Combinar com o resultado final
final_result <- merge(combined_result, mouse_mapping,
by.x = "mmusculus_homolog_ensembl_gene",
by.y = "ensembl_gene_id",
all.x = TRUE)
# Renomear a nova coluna
colnames(final_result)[ncol(final_result)] <- "mmusculus_homolog_entrezgene"
return(final_result)
}
library(ggplot2)
library(enrichplot)
library(clusterProfiler)
library(org.Mm.eg.db)
library(org.Hs.eg.db)  # Use o banco de dados apropriado para o seu organismo
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
######
listEnsembl()
listEnsemblArchives()
######
valores_interesse
######
valores_interesse344
######
valores_interesse344[1:30]
result344 <- map_human_to_mouse(valores_interesse344[1:30])
