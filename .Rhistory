cont = 1
for (i in rownames(colData)){
# print(rownames(colData)[cont])
a = colnames(data.subset)[cont]
b = rownames(colData)[cont]
print(a == b)
print(a)
print(b)
# print(cont)
cont = cont + 1
}
(rownames(colData))[2] == (colnames(data.subset))[2]
# create dds
dds <- DESeqDataSetFromMatrix(countData = data.subset,
colData = colData,
design = ~ 1) # not spcifying model
dds75 <- dds[rowSums(counts(dds) >= 15) >= 18,]
nrow(dds75) # 13284 genes
# perform variance stabilization
dds_norm <- vst(dds75)
# get normalized counts
norm.counts <- assay(dds_norm) %>%
t()
################################################################################
# 4. Network Construction
# Choose a set of soft-thresholding powers
################################################################################
power <- c(c(1:10), seq(from = 12, to = 50, by = 2))
# Call the network topology analysis function
sft <- pickSoftThreshold(norm.counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
# convert matrix to numeric
norm.counts[] <- sapply(norm.counts, as.numeric)
soft_power <- 18
temp_cor <- cor
cor <- WGCNA::cor
cor <- temp_cor
# save(bwnet, file = "PRJNA290995_lmj_bwnet.RData")
load("/Users/carlitos/Desktop/resultados/PRJNA290995_lmj/bwnet.RData")
module_eigengenes <- bwnet$MEs
# Print out a preview
head(module_eigengenes)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# create traits file - binarize categorical variables
traits <- colData %>%
mutate(disease_state_bin = ifelse(grepl('_Infected_', Treatment), 1, 0)) #%>% select(2)
# print(unique(traits))
# binarize categorical variables
unique(colData$Treatment)
colData$severity <- factor(colData$Treatment, levels = c(
"Lmj_Uninfected_4h","Lmj_Uninfected_24h","Lmj_Uninfected_48h","Lmj_Uninfected_72h",
"Lmj_Infected_4h","Lmj_Infected_24h","Lmj_Infected_48h","Lmj_Infected_72h"))
severity.out <- binarizeCategoricalColumns(colData$severity,
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 1)
traits <- cbind(traits, severity.out)
rownames(traits) <- traits$SampleName
traits <- traits %>% select(-1,-2,-3)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
# visualize module-trait association as a heatmap
nrow(module_eigengenes)
nrow(traits)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
colnames(heatmap.data)
heatmap.data
colnames(heatmap.data)
colnames(traits)
colnames(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[21:27],
y = names(heatmap.data)[1:20],rotLabX = 50,
col = c("cyan", "white", "grey", "purple"))
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
valores_interesse344
genes285 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 2)
valores_interesse285 = genes285$Entrez_ID
valores_interesse285
valores_interesse <- c("54915", "51441", "253943", "91746", "79068", "56339",
"57721", "54890", "64848", "221120", "8846", "84266",
"80312", "51605", "23378", "55006", "115708", "54888",
"1787", "55226", "10189", "4904", "8520", "2648",
"8850", "10524", "7994", "23522", "11143", "84148",
"9329", "1387", "79969", "2033", "3065", "3066",
"8841", "9759", "10014", "10013", "51564", "55869",
"9734", "83933", "23411", "22933", "23410", "23409",
"23408", "51548", "51547")
colors_geral = bwnet$colors
df_table_geral <- as.data.frame(table(colors_geral), stringsAsFactors = FALSE)
colnames(df_table_geral) <- c("Colors_geral", "Frequency")
df_table_geral
colors_interesse = bwnet$colors[valores_interesse]
colors_interesse
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
df_table <- as.data.frame(table(colors_interesse), stringsAsFactors = FALSE)
colnames(df_table) <- c("Colors", "Frequency")
df_colors <- data.frame(genes = valores_interesse, Colors = colors_interesse)
################################################################################
colors_interesse344 = bwnet$colors[valores_interesse344]
colors_interesse344
bwnet$colors[valores_interesse344]
table(bwnet$colors[valores_interesse344])
df_table344 <- as.data.frame(table(colors_interesse344), stringsAsFactors = FALSE)
colnames(df_table344) <- c("Colors", "Frequency")
df_colors344 <- data.frame(genes = valores_interesse344, Colors = colors_interesse344)
colors_interesse285 = bwnet$colors[valores_interesse285]
colors_interesse285
bwnet$colors[valores_interesse285]
table(bwnet$colors[valores_interesse285])
df_table285 <- as.data.frame(table(colors_interesse285), stringsAsFactors = FALSE)
colnames(df_table285) <- c("Colors", "Frequency")
df_colors285 <- data.frame(genes = valores_interesse285, Colors = colors_interesse285)
library(writexl)
write_xlsx(list("colors geral conts" = df_table_geral, "Color Counts" = df_table, "Colors Info" = df_colors), path = "/Users/carlitos/Desktop/bwnet_colors.xlsx")
df_colors
df_colors285
df_colors344
df_colors$genes <- as.character(df_colors$genes)
df_colors <- df_colors %>%
mutate(GeneSymbol = mapIds( org.Hs.eg.db, keys = genes, column = "SYMBOL",
keytype = "ENTREZID", multiVals = "first" ))
df_colors <- dplyr::select(df_colors, GeneSymbol, genes, Colors)
df_colors285$genes <- as.character(df_colors285$genes)
df_colors285 <- df_colors285 %>%
mutate(GeneSymbol = mapIds( org.Hs.eg.db, keys = genes, column = "SYMBOL",
keytype = "ENTREZID", multiVals = "first" ))
df_colors285 <- dplyr::select(df_colors285, GeneSymbol, genes, Colors)
df_colors344$genes <- as.character(df_colors344$genes)
df_colors344 <- df_colors344 %>%
mutate(GeneSymbol = mapIds( org.Hs.eg.db, keys = genes, column = "SYMBOL",
keytype = "ENTREZID", multiVals = "first" ))
df_colors344 <- dplyr::select(df_colors344, GeneSymbol, genes, Colors)
#############################################################
library(openxlsx)
# Função para gerar gráficos e salvá-los como imagens
generate_plot <- function(data, colors_col, freq_col, output_file, main_title, x_label, y_label) {
png(output_file, width = 800, height = 600) # Salva o gráfico como imagem
par(mar = c(8, 4, 4, 2) + 0.5)
par(mgp = c(5.5, 1, 0))
barplot(
data[[freq_col]],
names.arg = data[[colors_col]],
las = 2,
col = data[[colors_col]],
main = main_title,
xlab = x_label,
ylab = y_label
)
dev.off()
}
# Função para inserir gráfico no Excel
insert_plot_to_excel <- function(wb, sheet_name, image_file, start_col, start_row, width, height) {
insertImage(
wb,
sheet = sheet_name,
file = image_file,
width = width, height = height,
startCol = start_col, startRow = start_row
)
}
# Dados e configurações para os gráficos e abas
plots_info <- list(
list(
data = df_table_geral,
colors_col = "Colors_geral",
freq_col = "Frequency",
sheet_name = "colors geral conts",
output_file = "/Users/carlitos/Desktop/temp_plot1.png",
main_title = "Frequency of Colors (Geral)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Color interesse Counts",
output_file = "/Users/carlitos/Desktop/temp_plot2.png",
main_title = "Frequency of Colors (Subset)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table344,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Colors Interesse 344",
output_file = "/Users/carlitos/Desktop/temp_plot3.png",
main_title = "Frequency of Colors (344)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table285,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Colors Interesse 285",
output_file = "/Users/carlitos/Desktop/temp_plot4.png",
main_title = "Frequency of Colors (285)",
x_label = "Colors",
y_label = "Frequency"
)
)
# Criação do workbook e adição das abas
wb <- createWorkbook()
addWorksheet(wb, "colors geral conts")
addWorksheet(wb, "Color interesse Counts")
addWorksheet(wb, "Colors Info Interesse")
addWorksheet(wb, "Colors Interesse 344")
addWorksheet(wb, "Colors Info 344")
addWorksheet(wb, "Colors Interesse 285")
addWorksheet(wb, "Colors Info 285")
# Escreve os dados nas abas
writeData(wb, sheet = "colors geral conts", x = df_table_geral, startCol = 1, startRow = 1)
writeData(wb, sheet = "Color interesse Counts", x = df_table, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info Interesse", x = df_colors, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Interesse 344", x = df_table344, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info 344", x = df_colors344, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Interesse 285", x = df_table285, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info 285", x = df_colors285, startCol = 1, startRow = 1)
# Geração dos gráficos e inserção no Excel
for (plot_info in plots_info) {
generate_plot(
data = plot_info$data,
colors_col = plot_info$colors_col,
freq_col = plot_info$freq_col,
output_file = plot_info$output_file,
main_title = plot_info$main_title,
x_label = plot_info$x_label,
y_label = plot_info$y_label
)
insert_plot_to_excel(
wb = wb,
sheet_name = plot_info$sheet_name,
image_file = plot_info$output_file,
start_col = 5,
start_row = 1,
width = 8,
height = 6
)
}
# Salva o arquivo Excel no local especificado
saveWorkbook(wb, "/Users/carlitos/Desktop/bwnet_colors1.xlsx", overwrite = TRUE)
# Remove os arquivos temporários
for (plot_info in plots_info) {
file.remove(plot_info$output_file)
}
# Salva o arquivo Excel no local especificado
saveWorkbook(wb, "/Users/carlitos/Desktop/bwnet_colors_PRJNA290995.xlsx", overwrite = TRUE)
#############################################################
library(openxlsx)
# Função para gerar gráficos e salvá-los como imagens
generate_plot <- function(data, colors_col, freq_col, output_file, main_title, x_label, y_label) {
png(output_file, width = 800, height = 600) # Salva o gráfico como imagem
par(mar = c(8, 4, 4, 2) + 0.5)
par(mgp = c(5.5, 1, 0))
barplot(
data[[freq_col]],
names.arg = data[[colors_col]],
las = 2,
col = data[[colors_col]],
main = main_title,
xlab = x_label,
ylab = y_label
)
dev.off()
}
# Função para inserir gráfico no Excel
insert_plot_to_excel <- function(wb, sheet_name, image_file, start_col, start_row, width, height) {
insertImage(
wb,
sheet = sheet_name,
file = image_file,
width = width, height = height,
startCol = start_col, startRow = start_row
)
}
# Dados e configurações para os gráficos e abas
plots_info <- list(
list(
data = df_table_geral,
colors_col = "Colors_geral",
freq_col = "Frequency",
sheet_name = "colors geral conts",
output_file = "/Users/carlitos/Desktop/temp_plot1.png",
main_title = "Frequency of Colors (Geral)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Color interesse Counts",
output_file = "/Users/carlitos/Desktop/temp_plot2.png",
main_title = "Frequency of Colors (Subset)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table344,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Colors Interesse 344",
output_file = "/Users/carlitos/Desktop/temp_plot3.png",
main_title = "Frequency of Colors (344)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table285,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Colors Interesse 285",
output_file = "/Users/carlitos/Desktop/temp_plot4.png",
main_title = "Frequency of Colors (285)",
x_label = "Colors",
y_label = "Frequency"
)
)
# Criação do workbook e adição das abas
wb <- createWorkbook()
addWorksheet(wb, "colors geral conts")
addWorksheet(wb, "Color interesse Counts")
addWorksheet(wb, "Colors Info Interesse")
addWorksheet(wb, "Colors Interesse 344")
addWorksheet(wb, "Colors Info 344")
addWorksheet(wb, "Colors Interesse 285")
addWorksheet(wb, "Colors Info 285")
# Escreve os dados nas abas
writeData(wb, sheet = "colors geral conts", x = df_table_geral, startCol = 1, startRow = 1)
writeData(wb, sheet = "Color interesse Counts", x = df_table, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info Interesse", x = df_colors, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Interesse 344", x = df_table344, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info 344", x = df_colors344, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Interesse 285", x = df_table285, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info 285", x = df_colors285, startCol = 1, startRow = 1)
# Geração dos gráficos e inserção no Excel
for (plot_info in plots_info) {
generate_plot(
data = plot_info$data,
colors_col = plot_info$colors_col,
freq_col = plot_info$freq_col,
output_file = plot_info$output_file,
main_title = plot_info$main_title,
x_label = plot_info$x_label,
y_label = plot_info$y_label
)
insert_plot_to_excel(
wb = wb,
sheet_name = plot_info$sheet_name,
image_file = plot_info$output_file,
start_col = 5,
start_row = 1,
width = 8,
height = 6
)
}
# Salva o arquivo Excel no local especificado
saveWorkbook(wb, "/Users/carlitos/Desktop/bwnet_colors_PRJNA290995.xlsx", overwrite = TRUE)
# Remove os arquivos temporários
for (plot_info in plots_info) {
file.remove(plot_info$output_file)
}
#############################################################
library(openxlsx)
# Função para gerar gráficos e salvá-los como imagens
generate_plot <- function(data, colors_col, freq_col, output_file, main_title, x_label, y_label) {
png(output_file, width = 800, height = 600) # Salva o gráfico como imagem
par(mar = c(8, 4, 4, 2) + 0.5)
par(mgp = c(5.5, 1, 0))
barplot(
data[[freq_col]],
names.arg = data[[colors_col]],
las = 2,
col = data[[colors_col]],
main = main_title,
xlab = x_label,
ylab = y_label
)
dev.off()
}
# Função para inserir gráfico no Excel
insert_plot_to_excel <- function(wb, sheet_name, image_file, start_col, start_row, width, height) {
insertImage(
wb,
sheet = sheet_name,
file = image_file,
width = width, height = height,
startCol = start_col, startRow = start_row
)
}
# Dados e configurações para os gráficos e abas
plots_info <- list(
list(
data = df_table_geral,
colors_col = "Colors_geral",
freq_col = "Frequency",
sheet_name = "colors geral conts",
output_file = "/Users/carlitos/Desktop/temp_plot1.png",
main_title = "Frequency of Colors (Geral)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Color interesse Counts",
output_file = "/Users/carlitos/Desktop/temp_plot2.png",
main_title = "Frequency of Colors (Subset)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table344,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Colors Interesse 344",
output_file = "/Users/carlitos/Desktop/temp_plot3.png",
main_title = "Frequency of Colors (344)",
x_label = "Colors",
y_label = "Frequency"
),
list(
data = df_table285,
colors_col = "Colors",
freq_col = "Frequency",
sheet_name = "Colors Interesse 285",
output_file = "/Users/carlitos/Desktop/temp_plot4.png",
main_title = "Frequency of Colors (285)",
x_label = "Colors",
y_label = "Frequency"
)
)
# Criação do workbook e adição das abas
wb <- createWorkbook()
addWorksheet(wb, "colors geral conts")
addWorksheet(wb, "Color interesse Counts")
addWorksheet(wb, "Colors Info Interesse")
addWorksheet(wb, "Colors Interesse 344")
addWorksheet(wb, "Colors Info 344")
addWorksheet(wb, "Colors Interesse 285")
addWorksheet(wb, "Colors Info 285")
# Escreve os dados nas abas
writeData(wb, sheet = "colors geral conts", x = df_table_geral, startCol = 1, startRow = 1)
writeData(wb, sheet = "Color interesse Counts", x = df_table, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info Interesse", x = df_colors, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Interesse 344", x = df_table344, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info 344", x = df_colors344, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Interesse 285", x = df_table285, startCol = 1, startRow = 1)
writeData(wb, sheet = "Colors Info 285", x = df_colors285, startCol = 1, startRow = 1)
# Geração dos gráficos e inserção no Excel
for (plot_info in plots_info) {
generate_plot(
data = plot_info$data,
colors_col = plot_info$colors_col,
freq_col = plot_info$freq_col,
output_file = plot_info$output_file,
main_title = plot_info$main_title,
x_label = plot_info$x_label,
y_label = plot_info$y_label
)
insert_plot_to_excel(
wb = wb,
sheet_name = plot_info$sheet_name,
image_file = plot_info$output_file,
start_col = 5,
start_row = 1,
width = 8,
height = 6
)
}
# Salva o arquivo Excel no local especificado
saveWorkbook(wb, "/Users/carlitos/Desktop/bwnet_colors_PRJNA290995.xlsx", overwrite = TRUE)
# Remove os arquivos temporários
for (plot_info in plots_info) {
file.remove(plot_info$output_file)
}
