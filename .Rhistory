colnames(adj_matrix) <- gene_ids
heatmap.2(t(adj_matrix[heatmap_indices, heatmap_indices]),
col=redgreen(75),
labRow=NA, labCol=NA,
trace='none', dendrogram='row',
xlab='Gene', ylab='Gene',
main='Adjacency matrix',
density.info='none', revC=TRUE)
print("dsf")
# Cluster gene expression profiles; the flashClust function from
# the authors of WGCNA is another options for larger datasets.
# For input, we use the reciprocal of the adjacency matrix; hierarchical
# clustering works by comparing the _distance_ between objects instead of the
# _similarity_.
gene_tree <- hclust(as.dist(1 - adj_matrix), method="average")
# we will use the cuttreeDynamicTree method to break apart the hc dendrogram
# into separate modules
module_labels <- cutreeDynamicTree(dendro=gene_tree, minModuleSize=15,
deepSplit=TRUE)
# assign a color to each module for easier visualization and referencing
module_colors <- labels2colors(module_labels)
#' Converts an adjaceny matrix along with some optional vertex and edge
#'  information to a GraphML graph and saves it to disk.
#'
#' @param adj_mat An n-by-n weighted or unweighted adjacency matrix normalized
#' to contain values between 0 and 1.
#' @param filename Name of file to save output to. If file already exists it
#' will be overwritten. (default: network.graphml)
#' @param weighted Whether or not the adjacency matrix should be treated as a
#' weighted graph. (default: TRUE)
#' @param threshold For weighted networks, if a threshold value between 0 and
#' 1 is specified, all edges with weights below that value with be dropped from
#'   the graph. (default: 0.5)
#' @param max_edge_ratio The maximum number of edges per node in the network to
#' allow. If the number of edges that would remain for the specified threshold
#' exceeds this value, the threshold will be raised to reduce the number of
#' edges remaining. (default: 3)
#' @param nodeAttr A vector with length equal to the number of vertices in the
#' network, where the ith entry in the vector corresponds to some numeric or
#' string annotation that should be associated with the ith node in the
#' adjacency matrix. (default: NULL)
#' @param nodeAttrDataFrame A data frame containing one or more columns
#' associated with the vertices in the graph.  The ith row of the dataframe
#' should correspond to the ith entry in the adjacency matrix. (default: NULL)
#' @param edgeAttributes Extra attributes to associate with the graph edges,
#' formatted as a list of matrices of the same dimension and names as the
#' adjacency matrix.
#'
#' Examples
#' --------
#' export_network_to_graphml(adj_mat, filename='~/network.graphml',
#'                           threshold=0.3, nodeAttrDataFrame=df)
#'
#' See Also
#' --------
#' 1. http://www.inside-r.org/packages/cran/WGCNA/docs/exportNetworkToCytoscape
#' 2. http://graphml.graphdrawing.org/
#'
#' Returns
#' -------
#' An igraph graph object representing the exported graph.
export_network_to_graphml <- function (adj_mat, filename=NULL, weighted=TRUE,
threshold=0.5, max_edge_ratio=3,
nodeAttr=NULL, nodeAttrDataFrame=NULL,
edgeAttributes=NULL, verbose=FALSE) {
library('igraph')
# Determine filename to use
if (is.null(filename)) {
filename='/Users/carlitos/Desktop/network.graphml'
}
# TODO 2015/04/09
# Add option to rescale correlations for each module before applying
# threshold (this is simpler than the previous approach of trying to
# determine a different threshold for each module)
#
# Still, modules with very low correlations should be given somewhat
# less priority than those with very high correlations.
#module_colors <- unique(nodeAttrDataFrame$color)
#module_genes <- which(nodeAttrDataFrame$color == color)
#module_adjmat <- adj_mat[module_genes,]
#num_genes <- length(module_genes)
# Adjust threshold if needed to limit remaining edges
max_edges <- max_edge_ratio * nrow(adj_mat)
edge_to_total_ratio <- max_edges / length(adj_mat)
edge_limit_cutoff <- as.numeric(quantile(abs(adj_mat), 1 - edge_to_total_ratio))
# Also choose a minimum threshold to make sure that at least some edges
# are left
min_threshold <- as.numeric(quantile(abs(adj_mat), 0.9999))
threshold <- min(min_threshold, max(threshold, edge_limit_cutoff))
# Remove edges with weights lower than the cutoff
adj_mat[abs(adj_mat) < threshold] <- 0
# Drop any genes with no edges (TODO: Make optional)
orphaned <- (colSums(adj_mat) == 0)
adj_mat <- adj_mat[!orphaned, !orphaned]
# Also remove annotation entries
if (!is.null(nodeAttr)) {
nodeAttr <- nodeAttr[!orphaned]
}
if (!is.null(nodeAttrDataFrame)) {
nodeAttrDataFrame <- nodeAttrDataFrame[!orphaned,]
}
# Keep track of non-positive edges and rescale to range 0,1
is_zero     <- adj_mat == 0
is_negative <- adj_mat < 0
adj_mat <- (abs(adj_mat) - threshold) / (max(adj_mat) - threshold)
adj_mat[is_zero] <- 0
adj_mat[is_negative] <- -adj_mat[is_negative]
if (verbose) {
message(sprintf("Outputting matrix with %d nodes and %d edges",
nrow(adj_mat), sum(adj_mat > 0)))
}
# Create a new graph and add vertices
# Weighted graph
if (weighted) {
g <- graph.adjacency(adj_mat, mode='undirected', weighted=TRUE, diag=FALSE)
} else {
adj_mat[adj_mat != 0] <- 1
g <- graph.adjacency(adj_mat, mode='undirected', diag=FALSE)
}
# Add single node annotation from vector
if (!is.null(nodeAttr)) {
g <- set.vertex.attribute(g, "attr", value=nodeAttr)
}
# Add node one or more node annotations from a data frame
if (!is.null(nodeAttrDataFrame)) {
for (colname in colnames(nodeAttrDataFrame)) {
g <- set.vertex.attribute(g, colname, value=nodeAttrDataFrame[,colname])
}
}
edge_correlation_negative <- c()
# neg_correlations[edge_list]
edge_list <- get.edgelist(g)
for (i in 1:nrow(edge_list)) {
from <- edge_list[i, 1]
to   <- edge_list[i, 2]
}
# Save graph to a file
write.graph(g, filename, format='graphml')
# return igraph
return(g)
}
# use OrganismDb to retrieve gene annotations
gene_info <- select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
# use OrganismDb to retrieve gene annotations
log_counts
View(log_counts)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
colnames(gene_info) <- c('gene_id', 'description', 'chr', 'strand')
View(gene_info)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
View(gene_info)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME', 'SYMBOL' ))
View(gene_info)
colnames(gene_info) <- c('gene_id', 'description','SYMBOL', 'chr', 'strand')
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
module_colors
gene_info <- cbind(gene_info, module=module_colors)
# Include RGB versions of module colors for better assignment in Cytoscape
gene_info$color_rgb <- col2hex(gene_info$module)
# first, it's a good idea to check the distribution of edges weights in our
# correlation matrix. This will help us choose a reasonable cutoff for
# exporting the network.
g <- export_network_to_graphml(adj_matrix, filename='/Users/carlitos/Desktop/networkmais novo.graphml',
threshold=0.4, nodeAttrDataFrame=gene_info)
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
module_colors
gene_info <- cbind(gene_info, module=module_colors)
# Include RGB versions of module colors for better assignment in Cytoscape
gene_info$color_rgb <- col2hex(gene_info$module)
# first, it's a good idea to check the distribution of edges weights in our
# correlation matrix. This will help us choose a reasonable cutoff for
# exporting the network.
g <- export_network_to_graphml(adj_matrix, filename='/Users/carlitos/Desktop/networkmais novo.graphml',
threshold=0.4, nodeAttrDataFrame=gene_info)
View(g)
setwd("/Users/carlitos/Desktop/RNA-seq/")
library(ggrepel)
library(biomaRt)
library(dplyr)
setwd("/Users/carlitos/Desktop/RNA-seq/")
setwd("/Users/carlitos/Desktop/RNA-seq/")
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
tabular_dir  <- "experimentos/fastas/Leishmania/PRJNA290995 --------lmj/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
setwd("/Users/carlitos/Desktop/RNA-seq/")
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
tabular_dir  <- "experimentos/fastas/Leishmania/PRJNA290995 --------lmj/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))  # Renomeia a coluna "counts" para o nome do arquivo
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) = combined_df$Geneid
combined_df = combined_df[,-1]
data = combined_df
View(combined_df)
gsg <- goodSamplesGenes(t(data))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# remove genes that are detectd as outliers
data <- data[gsg$goodGenes == TRUE,]
# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(data)), method = "average")
plot(htree)
pca <- prcomp(t(data))
pca.dat <- pca$x
pca.var <- pca$sdev^2
pca.var.percent <- round(pca.var/sum(pca.var)*100, digits = 2)
pca.dat <- as.data.frame(pca.dat)
ggplot(pca.dat, aes(PC1, PC2)) +
geom_point() +
geom_text(label = rownames(pca.dat)) +
labs(x = paste0('PC1: ', pca.var.percent[1], ' %'),
y = paste0('PC2: ', pca.var.percent[2], ' %'))
#exclude outlier samples
samples.to.be.excluded <- c("Lama_Infected_72h_R3_SRR2163299")
data.subset <- data[,!(colnames(data) %in% samples.to.be.excluded)]
phenoData  <-  read_excel("experimentos/PRJNA290995_lmj/Phenodata lmj.xlsx", col_names = TRUE)
lista  <- phenoData$id
phenoData <- phenoData[,-1]
rownames(phenoData) <- lista
# Visualizar o resultado
print(phenoData)
# exclude outlier samples
colData <- phenoData %>%
filter(!row.names(.) %in% samples.to.be.excluded)
# fixing column names in colData
names(colData)
names(colData) <- gsub(':ch1', '', names(colData))
names(colData) <- gsub('\\s', '_', names(colData))
# making the rownames and column names identical
all(rownames(colData) %in% colnames(data.subset))
all(rownames(colData) == colnames(data.subset))
cont = 1
for (i in rownames(colData)){
# print(rownames(colData)[cont])
a = colnames(data.subset)[cont]
b = rownames(colData)[cont]
print(a == b)
print(a)
print(b)
# print(cont)
cont = cont + 1
}
(rownames(colData))[2] == (colnames(data.subset))[2]
# create dds
dds <- DESeqDataSetFromMatrix(countData = data.subset,
colData = colData,
design = ~ 1) # not spcifying model
dds75 <- dds[rowSums(counts(dds) >= 15) >= 18,]
nrow(dds75) # 13284 genes
# perform variance stabilization
dds_norm <- vst(dds75)
# get normalized counts
norm.counts <- assay(dds_norm) %>%
t()
###########################################
# 4. Network Construction  ---------------------------------------------------
# Choose a set of soft-thresholding powers
power <- c(c(1:10), seq(from = 12, to = 50, by = 2))
# Call the network topology analysis function
sft <- pickSoftThreshold(norm.counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
# convert matrix to numeric
norm.counts[] <- sapply(norm.counts, as.numeric)
soft_power <- 18
temp_cor <- cor
cor <- WGCNA::cor
cor <- temp_cor
# save(bwnet, file = "PRJNA290995_lmj_bwnet.RData")
load("/Users/carlitos/Desktop/resultados/PRJNA290995_lmj/bwnet.RData")
# save(bwnet, file = "PRJNA290995_lmj_bwnet.RData")
load("/Users/carlitos/Desktop/resultados/PRJNA290995_lmj/bwnet.RData")
# save(bwnet, file = "PRJNA290995_lmj_bwnet.RData")
load("/Users/carlitos/Desktop/resultados/PRJNA290995_lmj/bwnet.RData")
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet$MEs
# Print out a preview
head(module_eigengenes)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# create traits file - binarize categorical variables
traits <- colData %>%
mutate(disease_state_bin = ifelse(grepl('_Infected_', Treatment), 1, 0)) #%>% select(2)
# print(unique(traits))
# binarize categorical variables
unique(colData$Treatment)
colData$severity <- factor(colData$Treatment, levels = c(
"Lmj_Uninfected_4h","Lmj_Uninfected_24h","Lmj_Uninfected_48h","Lmj_Uninfected_72h",
"Lmj_Infected_4h","Lmj_Infected_24h","Lmj_Infected_48h","Lmj_Infected_72h"))
severity.out <- binarizeCategoricalColumns(colData$severity,
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 1)
traits <- cbind(traits, severity.out)
rownames(traits) <- traits$SampleName
traits <- traits %>% select(-1,-2,-3)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
# visualize module-trait association as a heatmap
nrow(module_eigengenes)
nrow(traits)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
colnames(heatmap.data)
heatmap.data
colnames(heatmap.data)
colnames(traits)
colnames(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[21:27],
y = names(heatmap.data)[1:20],rotLabX = 50,
col = c("cyan", "white", "grey", "purple"))
module.gene.mapping <- as.data.frame(bwnet$colors)
module.gene.mapping %>%
filter(`bwnet$colors` == 'brown') %>%
rownames()
class(bwnet$colors)
valores_interesse <- c("54915", "51441", "253943", "91746", "79068", "56339",
"57721", "54890", "64848", "221120", "8846", "84266",
"80312", "51605", "23378", "55006", "115708", "54888",
"1787", "55226", "10189", "4904", "8520", "2648",
"8850", "10524", "7994", "23522", "11143", "84148",
"9329", "1387", "79969", "2033", "3065", "3066",
"8841", "9759", "10014", "10013", "51564", "55869",
"9734", "83933", "23411", "22933", "23410", "23409",
"23408", "51548", "51547")
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx")
read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 2)
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
View(genes344)
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Geneid
View(genes344)
valores_interesse344 = genes344$Entrez_ID
genes285 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 2)
valores_interesse285 = genes285$Entrez_ID
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
bwnet$colors
bwnet$colors
table(bwnet$colors[valores_interesse])
bwnet$colors[valores_interesse]
bwnet$colors
colors = bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
# Criando o primeiro data frame
df_colors <- data.frame(Valores = valores_interesse, Colors = colors)
# Criando o segundo data frame (tabela de frequências)
df_table <- as.data.frame(table(colors), stringsAsFactors = FALSE)
colnames(df_table) <- c("Colors", "Frequency")
# Salvando em um arquivo Excel com duas abas
library(writexl)
# Salvando em um arquivo Excel com duas abas
library(writexl)
# Salvando em um arquivo Excel com duas abas
library(writexl)
write_xlsx(list("Colors Info" = df_colors, "Color Counts" = df_table), path = "/Users/carlitos/Desktop/bwnet_colors.xlsx")
bwnet$colors
View(df_colors)
bwnet$colors
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
table(bwnet$colors)
coresGeral = bwnet$colors
table(bwnet$colors)
colors_geral = table(bwnet$colors)
df_table_geral <- as.data.frame(table(colors_geral), stringsAsFactors = FALSE)
colnames(df_table_geral) <- c("Colors_geral", "Frequency")
View(df_table_geral)
View(df_table_geral)
table(bwnet$colors)
df_table <- as.data.frame(table(colors), stringsAsFactors = FALSE)
colnames(df_table) <- c("Colors", "Frequency")
View(df_table)
colors = bwnet$colors[valores_interesse]
table(bwnet$colors)
name(table(bwnet$colors))
names(table(bwnet$colors))
colors_geral = names(table(bwnet$colors))
df_table_geral <- as.data.frame(table(colors_geral), stringsAsFactors = FALSE)
colnames(df_table_geral) <- c("Colors_geral", "Frequency")
View(df_table_geral)
bwnet$colors[valores_interesse]
colors_geral = table(bwnet$colors)
names(table(bwnet$colors))
values(table(bwnet$colors))
colors_geral = bwnet$colors
colors_geral = bwnet$colors
bwnet$colors
df_table_geral <- as.data.frame(table(colors_geral), stringsAsFactors = FALSE)
View(df_table_geral)
colnames(df_table_geral) <- c("Colors_geral", "Frequency")
bwnet$colors[valores_interesse]
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
class(bwnet$colors)
genes344 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 1)
valores_interesse344 = genes344$Entrez_ID
genes285 = read_excel("/Users/carlitos/Desktop/acetylation_344.xlsx", sheet = 2)
valores_interesse285 = genes285$Entrez_ID
valores_interesse <- c("54915", "51441", "253943", "91746", "79068", "56339",
"57721", "54890", "64848", "221120", "8846", "84266",
"80312", "51605", "23378", "55006", "115708", "54888",
"1787", "55226", "10189", "4904", "8520", "2648",
"8850", "10524", "7994", "23522", "11143", "84148",
"9329", "1387", "79969", "2033", "3065", "3066",
"8841", "9759", "10014", "10013", "51564", "55869",
"9734", "83933", "23411", "22933", "23410", "23409",
"23408", "51548", "51547")
colors_geral = bwnet$colors
df_table_geral <- as.data.frame(table(colors_geral), stringsAsFactors = FALSE)
colnames(df_table_geral) <- c("Colors_geral", "Frequency")
colors = bwnet$colors[valores_interesse]
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
df_table <- as.data.frame(table(colors), stringsAsFactors = FALSE)
colnames(df_table) <- c("Colors", "Frequency")
df_colors <- data.frame(Valores = valores_interesse, Colors = colors)
library(writexl)
write_xlsx(list("colors geral" = colors_geral, "Colors Info" = df_colors, "Color Counts" = df_table), path = "/Users/carlitos/Desktop/bwnet_colors.xlsx")
colors_geral = bwnet$colors
df_table_geral <- as.data.frame(table(colors_geral), stringsAsFactors = FALSE)
colnames(df_table_geral) <- c("Colors_geral", "Frequency")
colors = bwnet$colors[valores_interesse]
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
df_table <- as.data.frame(table(colors), stringsAsFactors = FALSE)
colnames(df_table) <- c("Colors", "Frequency")
df_colors <- data.frame(Valores = valores_interesse, Colors = colors)
library(writexl)
write_xlsx(list("colors geral" = df_table_geral, "Colors Info" = df_colors, "Color Counts" = df_table), path = "/Users/carlitos/Desktop/bwnet_colors.xlsx")
df_colors <- data.frame(Valores = valores_interesse, Colors = colors)
library(writexl)
write_xlsx(list("colors geral conts" = df_table_geral, "Color Counts" = df_table, "Colors Info" = df_colors), path = "/Users/carlitos/Desktop/bwnet_colors.xlsx")
