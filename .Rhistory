if (weighted) {
g <- graph.adjacency(adj_mat, mode='undirected', weighted=TRUE, diag=FALSE)
} else {
adj_mat[adj_mat != 0] <- 1
g <- graph.adjacency(adj_mat, mode='undirected', diag=FALSE)
}
# Add single node annotation from vector
if (!is.null(nodeAttr)) {
g <- set.vertex.attribute(g, "attr", value=nodeAttr)
}
# Add node one or more node annotations from a data frame
if (!is.null(nodeAttrDataFrame)) {
for (colname in colnames(nodeAttrDataFrame)) {
g <- set.vertex.attribute(g, colname, value=nodeAttrDataFrame[,colname])
}
}
edge_correlation_negative <- c()
# neg_correlations[edge_list]
edge_list <- get.edgelist(g)
for (i in 1:nrow(edge_list)) {
from <- edge_list[i, 1]
to   <- edge_list[i, 2]
}
# Save graph to a file
write.graph(g, filename, format='graphml')
# return igraph
return(g)
}
# use OrganismDb to retrieve gene annotations
gene_info <- select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
# use OrganismDb to retrieve gene annotations
log_counts
View(log_counts)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
colnames(gene_info) <- c('gene_id', 'description', 'chr', 'strand')
View(gene_info)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
View(gene_info)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME', 'SYMBOL' ))
View(gene_info)
colnames(gene_info) <- c('gene_id', 'description','SYMBOL', 'chr', 'strand')
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
module_colors
gene_info <- cbind(gene_info, module=module_colors)
# Include RGB versions of module colors for better assignment in Cytoscape
gene_info$color_rgb <- col2hex(gene_info$module)
# first, it's a good idea to check the distribution of edges weights in our
# correlation matrix. This will help us choose a reasonable cutoff for
# exporting the network.
g <- export_network_to_graphml(adj_matrix, filename='/Users/carlitos/Desktop/networkmais novo.graphml',
threshold=0.4, nodeAttrDataFrame=gene_info)
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
module_colors
gene_info <- cbind(gene_info, module=module_colors)
# Include RGB versions of module colors for better assignment in Cytoscape
gene_info$color_rgb <- col2hex(gene_info$module)
# first, it's a good idea to check the distribution of edges weights in our
# correlation matrix. This will help us choose a reasonable cutoff for
# exporting the network.
g <- export_network_to_graphml(adj_matrix, filename='/Users/carlitos/Desktop/networkmais novo.graphml',
threshold=0.4, nodeAttrDataFrame=gene_info)
View(g)
setwd("/Users/carlitos/Desktop/RNA-seq/")
setwd("/Users/carlitos/Documents/")
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
tabular_dir  <- "experimentos/fastas/Leishmania/PRJNA290995 --------lmj/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))  # Renomeia a coluna "counts" para o nome do arquivo
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) = combined_df$Geneid
combined_df = combined_df[,-1]
data = combined_df
gsg <- goodSamplesGenes(t(data))
# Visualizar o resultado
print(phenoData)
# exclude outlier samples
colData <- phenoData %>%
filter(!row.names(.) %in% samples.to.be.excluded)
# exclude outlier samples
colData <- phenoData %>%
filter(!row.names(.) %in% samples.to.be.excluded)
setwd("/Users/carlitos/Desktop/RNA-seq/")
setwd("/Users/carlitos/Documents/")
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
tabular_dir  <- "experimentos/fastas/Leishmania/PRJNA290995 --------lmj/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))  # Renomeia a coluna "counts" para o nome do arquivo
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) = combined_df$Geneid
combined_df = combined_df[,-1]
data = combined_df
gsg <- goodSamplesGenes(t(data))
summary(gsg)
setwd("/Users/carlitos/Desktop/RNA-seq/")
setwd("/Users/carlitos/Desktop/RNA-seq/")
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
tabular_dir  <- "experimentos/fastas/Leishmania/PRJNA290995 --------l"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))  # Renomeia a coluna "counts" para o nome do arquivo
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) = combined_df$Geneid
combined_df = combined_df[,-1]
data = combined_df
gsg <- goodSamplesGenes(t(data))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# remove genes that are detectd as outliers
data <- data[gsg$goodGenes == TRUE,]
setwd("/Users/carlitos/Desktop/RNA-seq/")
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
tabular_dir  <- "experimentos/fastas/Leishmania/PRJNA290995 --------l"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))  # Renomeia a coluna "counts" para o nome do arquivo
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
tabular_dir  <- "experimentos/fastas/Leishmania/PRJNA290995 --------lmj/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))  # Renomeia a coluna "counts" para o nome do arquivo
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) = combined_df$Geneid
combined_df = combined_df[,-1]
data = combined_df
gsg <- goodSamplesGenes(t(data))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# remove genes that are detectd as outliers
data <- data[gsg$goodGenes == TRUE,]
# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(data)), method = "average")
plot(htree)
pca <- prcomp(t(data))
pca.dat <- pca$x
pca.var <- pca$sdev^2
pca.var.percent <- round(pca.var/sum(pca.var)*100, digits = 2)
pca.dat <- as.data.frame(pca.dat)
ggplot(pca.dat, aes(PC1, PC2)) +
geom_point() +
geom_text(label = rownames(pca.dat)) +
labs(x = paste0('PC1: ', pca.var.percent[1], ' %'),
y = paste0('PC2: ', pca.var.percent[2], ' %'))
#exclude outlier samples
samples.to.be.excluded <- c("Lama_Infected_72h_R3_SRR2163299")
data.subset <- data[,!(colnames(data) %in% samples.to.be.excluded)]
phenoData  <-  read_excel("experimentos/PRJNA290995_lmj/Phenodata lmj.xlsx", col_names = TRUE)
lista  <- phenoData$id
phenoData <- phenoData[,-1]
rownames(phenoData) <- lista
# Visualizar o resultado
print(phenoData)
# exclude outlier samples
colData <- phenoData %>%
filter(!row.names(.) %in% samples.to.be.excluded)
# fixing column names in colData
names(colData)
names(colData) <- gsub(':ch1', '', names(colData))
names(colData) <- gsub('\\s', '_', names(colData))
# making the rownames and column names identical
all(rownames(colData) %in% colnames(data.subset))
all(rownames(colData) == colnames(data.subset))
cont = 1
for (i in rownames(colData)){
# print(rownames(colData)[cont])
a = colnames(data.subset)[cont]
b = rownames(colData)[cont]
print(a == b)
print(a)
print(b)
# print(cont)
cont = cont + 1
}
(rownames(colData))[2] == (colnames(data.subset))[2]
# create dds
dds <- DESeqDataSetFromMatrix(countData = data.subset,
colData = colData,
design = ~ 1) # not spcifying model
dds75 <- dds[rowSums(counts(dds) >= 15) >= 18,]
nrow(dds75) # 13284 genes
# perform variance stabilization
dds_norm <- vst(dds75)
# get normalized counts
norm.counts <- assay(dds_norm) %>%
t()
###########################################
# 4. Network Construction  ---------------------------------------------------
# Choose a set of soft-thresholding powers
power <- c(c(1:10), seq(from = 12, to = 50, by = 2))
# Call the network topology analysis function
sft <- pickSoftThreshold(norm.counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
# convert matrix to numeric
norm.counts[] <- sapply(norm.counts, as.numeric)
soft_power <- 18
cor <- temp_cor
soft_power <- 18
temp_cor <- cor
cor <- WGCNA::cor
cor <- temp_cor
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet$MEs
# Print out a preview
head(module_eigengenes)
cor <- temp_cor
load("/Users/carlitos/Desktop/resultados/PRJNA290995_lmj/bwnet.RData")
# 5. Module Eigengenes ---------------------------------------------------------
module_eigengenes <- bwnet$MEs
# Print out a preview
head(module_eigengenes)
# get number of genes for each module
color_table=table(bwnet$colors)
color_table
# Plot the dendrogram and the module colors before and after merging underneath
plotDendroAndColors(bwnet$dendrograms[[1]], cbind(bwnet$unmergedColors, bwnet$colors),
c("unmerged", "merged"),
dendroLabels = FALSE,
addGuide = TRUE,
hang= 0.03,
guideHang = 0.05)
# create traits file - binarize categorical variables
traits <- colData %>%
mutate(disease_state_bin = ifelse(grepl('_Infected_', Treatment), 1, 0)) #%>% select(2)
# print(unique(traits))
# binarize categorical variables
unique(colData$Treatment)
colData$severity <- factor(colData$Treatment, levels = c(
"Lmj_Uninfected_4h","Lmj_Uninfected_24h","Lmj_Uninfected_48h","Lmj_Uninfected_72h",
"Lmj_Infected_4h","Lmj_Infected_24h","Lmj_Infected_48h","Lmj_Infected_72h"))
severity.out <- binarizeCategoricalColumns(colData$severity,
includePairwise = FALSE,
includeLevelVsAll = TRUE,
minCount = 1)
traits <- cbind(traits, severity.out)
rownames(traits) <- traits$SampleName
traits <- traits %>% select(-1,-2,-3)
# Define numbers of genes and samples
nSamples <- nrow(norm.counts)
nGenes <- ncol(norm.counts)
module.trait.corr <- cor(module_eigengenes, traits, use = 'p')
module.trait.corr.pvals <- corPvalueStudent(module.trait.corr, nSamples)
# visualize module-trait association as a heatmap
nrow(module_eigengenes)
nrow(traits)
heatmap.data <- merge(module_eigengenes, traits, by = 'row.names')
head(heatmap.data)
heatmap.data <- heatmap.data %>%
column_to_rownames(var = 'Row.names')
colnames(heatmap.data)
heatmap.data
colnames(heatmap.data)
colnames(traits)
colnames(heatmap.data)
CorLevelPlot(heatmap.data,
x = names(heatmap.data)[21:27],
y = names(heatmap.data)[1:20],rotLabX = 50,
col = c("cyan", "white", "grey", "purple"))
module.gene.mapping <- as.data.frame(bwnet$colors)
module.gene.mapping %>%
filter(`bwnet$colors` == 'brown') %>%
rownames()
class(bwnet$colors)
valores_interesse <- c("54915", "51441", "253943", "91746", "79068", "56339",
"57721", "54890", "64848", "221120", "8846", "84266",
"80312", "51605", "23378", "55006", "115708", "54888",
"1787", "55226", "10189", "4904", "8520", "2648",
"8850", "10524", "7994", "23522", "11143", "84148",
"9329", "1387", "79969", "2033", "3065", "3066",
"8841", "9759", "10014", "10013", "51564", "55869",
"9734", "83933", "23411", "22933", "23410", "23409",
"23408", "51548", "51547")
bwnet$colors[valores_interesse]
table(bwnet$colors[valores_interesse])
# Calcular o TOM (Topological Overlap Matrix)
# TOM <- TOMsimilarityFromExpr(norm.counts, power = soft_power, TOMType = "signed")
# save(TOM, file = "TOM_signed.RData")
load("TOM_signed.RData")
# Carregar as bibliotecas necessárias
library(Homo.sapiens)
library(AnnotationDbi)
library(org.Hs.eg.db)
# Suponha que 'geneIDs' seja uma lista de IDs de genes a partir do seu conjunto de dados
geneIDs <- colnames(norm.counts)
# Obter os símbolos dos genes e nomes completos
geneSymbols <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "SYMBOL", keytype = "ENTREZID", multiVals = "first")
geneNames <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "GENENAME", keytype = "ENTREZID", multiVals = "first")
# Criar uma tabela de nodos com cores dos módulos e anotações adicionais
nodeData <- data.frame(Node = geneIDs,
ModuleColor = bwnet$colors,
GeneSymbol = geneSymbols,
GeneName = geneNames)
# Obter os símbolos dos genes e nomes completos
geneSymbols <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "SYMBOL", keytype = "ENTREZID", multiVals = "first")
geneNames <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "GENENAME", keytype = "ENTREZID", multiVals = "first")
# Criar uma tabela de nodos com cores dos módulos e anotações adicionais
nodeData <- data.frame(Node = geneIDs,
ModuleColor = bwnet$colors,
GeneSymbol = geneSymbols,
GeneName = geneNames)
# Remover quaisquer genes sem informações de símbolo ou nome, se necessário
nodeData <- na.omit(nodeData)
View(nodeData)
# Exportar para um arquivo que será usado no Cytoscape
write.table(nodeData, "CytoscapeInput-nodes1.txt", sep = "\t", row.names = FALSE, col.names = TRUE, quote = FALSE)
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.09)
# Mostrar o resultado
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.14)
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.2)
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.19)
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.15)
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.16)
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.145)
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Contar o número de conexões com TOM > 0.09
num_connections_above_threshold <- sum(TOM > 0.148)
cat("Número de conexões com TOM > 0.09:", num_connections_above_threshold, "\n")
# Carregar pacotes necessários
library(org.Hs.eg.db)
library(AnnotationDbi)
View(nodeData)
# Criar o data frame com cores e símbolos
geneData <- data.frame(
GeneID = geneIDs,
ModuleColor = bwnet$colors[valores_interesse],
GeneSymbol = geneSymbols
)
# Carregar pacotes necessários
library(org.Hs.eg.db)
library(AnnotationDbi)
# Suponha que 'valores_interesse' contenha IDs de genes
geneIDs <- valores_interesse
# Obter os símbolos dos genes com base nos IDs
geneSymbols <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "SYMBOL", keytype = "ENSEMBL", multiVals = "first")
# Criar o data frame com cores e símbolos
geneData <- data.frame(
GeneID = geneIDs,
ModuleColor = bwnet$colors[valores_interesse],
GeneSymbol = geneSymbols
)
# Carregar pacotes necessários
library(org.Hs.eg.db)
library(AnnotationDbi)
# Suponha que 'valores_interesse' contenha IDs de genes
geneIDs <- valores_interesse
# Obter os símbolos dos genes com base nos IDs
geneSymbols <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "SYMBOL", keytype = "ENSEMBL", multiVals = "first")
# Criar o data frame com cores e símbolos
geneData <- data.frame(
GeneID = geneIDs,
ModuleColor = bwnet$colors[valores_interesse],
GeneSymbol = geneSymbols
)
# Suponha que 'valores_interesse' contenha IDs de genes
geneIDs <- valores_interesse
geneIDs
# Obter os símbolos dos genes com base nos IDs
geneSymbols <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "SYMBOL", keytype = "ENSEMBL", multiVals = "first")
geneData <- data.frame(
GeneID = geneIDs,
ModuleColor = bwnet$colors[valores_interesse],
GeneSymbol = geneSymbols,
GeneName = geneNames)
geneData <- data.frame(
GeneID = geneIDs,
ModuleColor = bwnet$colors[valores_interesse],
GeneSymbol = geneSymbols,
GeneName = geneNames)
# Carregar pacotes necessários
library(org.Hs.eg.db)
library(AnnotationDbi)
# Suponha que 'valores_interesse' contenha os IDs de genes relevantes
geneIDs <- valores_interesse
# Obter os símbolos dos genes com base nos IDs
geneSymbols <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "SYMBOL", keytype = "ENTREZID", multiVals = "first")
geneNames <- mapIds(org.Hs.eg.db, keys = geneIDs, column = "GENENAME", keytype = "ENTREZID", multiVals = "first")
# Criar o data frame com cores e símbolos
geneData <- data.frame(
GeneID = geneIDs,
ModuleColor = bwnet$colors[geneIDs],  # Usando geneIDs em vez de valores_interesse
GeneSymbol = geneSymbols,
GeneName = geneNames
)
# Remover linhas com valores NA, se necessário
geneData <- na.omit(geneData)
# Visualizar o data frame resultante
print(geneData)
View(geneData)
View(geneData)
