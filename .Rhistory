# Filtra genes upregulados
up_genes <- subset(res, log2FoldChange > up_threshold & padj < padj_cutoff)
up_genes <- up_genes[!is.na(up_genes$padj), ]
# Filtra genes downregulados
down_genes <- subset(res, log2FoldChange < down_threshold & padj < padj_cutoff)
down_genes <- down_genes[!is.na(down_genes$padj), ]
# Converte rownames (genes) para uma coluna separada
up_genes$Entrez_ID <- rownames(up_genes)
down_genes$Entrez_ID <- rownames(down_genes)
# Salva os resultados em Excel
wb <- createWorkbook()
addWorksheet(wb, "Upregulated")
addWorksheet(wb, "Downregulated")
writeData(wb, "Upregulated", up_genes)
writeData(wb, "Downregulated", down_genes)
saveWorkbook(wb, output_file, overwrite = TRUE)
return(list(up = up_genes, down = down_genes))
}
intersect(phenoData$SampleName[phenoData$Treatment %in% c("Control_Non-infected", "LPS")], colnames(data))
colnames(data)
phenoData
# Cria uma lista para armazenar os objetos DESeq2
dds_list <- list()
comparisons <- list(
"Lama_24h" = c("Lama_Uninfected_24h", "Lama_Infected_24h"),
"Lama_48h" = c("Lama_Uninfected_48h", "Lama_Infected_48h"),
"Lama_4h"  = c("Lama_Uninfected_4h", "Lama_Infected_4h"),
"Lama_72h" = c("Lama_Uninfected_72h", "Lama_Infected_72h"),
"Lmj_24h"  = c("Lmj_Uninfected_24h", "Lmj_Infected_24h"),
"Lmj_48h"  = c("Lmj_Uninfected_48h", "Lmj_Infected_48h"),
"Lmj_4h"   = c("Lmj_Uninfected_4h", "Lmj_Infected_4h"),
"Lmj_72h"  = c("Lmj_Uninfected_72h", "Lmj_Infected_72h")
)
# Loop para realizar a análise para cada comparação e salvar os objetos DESeq2 em dds_list
for (cmp in names(comparisons)) {
# Define os grupos para a comparação atual
group1 <- comparisons[[cmp]][1]  # Controle (Uninfected)
group2 <- comparisons[[cmp]][2]  # Tratado (Infected)
# Cria nomes de arquivos de saída para cada análise
deseq_out <- file.path(results_dir, paste0("DESeq2_", group1, "_vs_", group2, ".tabular"))
pca_out   <- file.path(results_dir, paste0("PCA_", group1, "_vs_", group2, ".jpeg"))
sd_out    <- file.path(results_dir, paste0("SampleDistances_", group1, "_vs_", group2, ".jpeg"))
disp_out  <- file.path(results_dir, paste0("Dispersion_", group1, "_vs_", group2, ".jpeg"))
pval_out  <- file.path(results_dir, paste0("Histogram_pvalues_", group1, "_vs_", group2, ".jpeg"))
ma_out    <- file.path(results_dir, paste0("MAplot_", group1, "_vs_", group2, ".jpeg"))
vol_out   <- file.path(results_dir, paste0("Volcano_", group1, "_vs_", group2, ".jpeg"))
# Executa DESeq2 para a comparação desejada e armazena o objeto em dds_list
dds_obj <- run_deseq_analysis(data, phenoData, group1, group2, deseq_out)
dds_list[[cmp]] <- dds_obj
# Executa as demais análises e salva os gráficos
run_pca_analysis(dds_obj, pca_out)
run_sample_distances(dds_obj, sd_out)
run_dispersion_plot(dds_obj, disp_out)
run_pval_histogram(dds_obj, pval_out)
ma_res <- run_ma_plot(dds_obj, ma_out)
print(head(ma_res$data))
run_volcano_plot(dds_obj, vol_out)
}
# Loop para realizar a análise de Venn para cada ponto de tempo
time_points <- c("4h", "24h", "48h", "72h")
for(tp in time_points) {
# Obtém os objetos DESeq2 para cada espécie no tempo 'tp'
dds_Lama <- dds_list[[paste0("Lama_", tp)]]
dds_Lmj  <- dds_list[[paste0("Lmj_", tp)]]
# Verifica se ambos os objetos existem para o tempo corrente
if (is.null(dds_Lama) | is.null(dds_Lmj)) {
warning(paste("Um dos objetos DESeq2 para", tp, "não foi encontrado. Pulando esse tempo."))
next
}
# Define o diretório/arquivo de saída para a análise de Venn
venn_out <- file.path(results_dir, paste0("Venn_Analysis_", tp))
# Executa a análise de Venn comparando os resultados das duas análises
# run_venn_analysis(dds_Lama, dds_Lmj,
#                   paste0("Lama_Uninfected_vs_Lama_Infected_", tp),
#                   paste0("Lmj_Uninfected_vs_Lmj_Infected_", tp),
#                   venn_out)
}
library(openxlsx)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(ggplot2)
library(enrichplot)
# Função para detectar o organismo com base nos IDs
detect_organism <- function(entrez_ids) {
hs_ids <- keys(org.Hs.eg.db, keytype = "ENTREZID")
mm_ids <- keys(org.Mm.eg.db, keytype = "ENTREZID")
if (any(entrez_ids %in% hs_ids)) {
return("Homo sapiens")
} else if (any(entrez_ids %in% mm_ids)) {
return("Mus musculus")
} else {
stop("Organismo não reconhecido para os IDs fornecidos.")
}
}
library(DESeq2)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(openxlsx)
library(ggplot2)
library(enrichplot)
# Função para detectar o organismo com base nos IDs
detect_organism <- function(entrez_ids) {
hs_ids <- keys(org.Hs.eg.db, keytype = "ENTREZID")
mm_ids <- keys(org.Mm.eg.db, keytype = "ENTREZID")
if (any(entrez_ids %in% hs_ids)) {
return("Homo sapiens")
} else if (any(entrez_ids %in% mm_ids)) {
return("Mus musculus")
} else {
stop("Organismo não reconhecido para os IDs fornecidos.")
}
}
# Função para selecionar o banco de dados correto
select_orgDb <- function(gene_ids) {
organism <- detect_organism(gene_ids)
if (organism == "Homo sapiens") {
return(org.Hs.eg.db)
} else {
return(org.Mm.eg.db)
}
}
# Função para selecionar o banco de dados correto
select_orgDb <- function(gene_ids) {
organism <- detect_organism(gene_ids)
if (organism == "Homo sapiens") {
return(org.Hs.eg.db)
} else {
return(org.Mm.eg.db)
}
}
run_deseq_up_down_enrichment <- function(dds,
up_threshold   = 1,
down_threshold = -1,
padj_cutoff    = 0.05,
ontologies     = c("BP","MF"),
pAdjustMethod  = "BH",
pvalueCutoff   = 0.05,
qvalueCutoff   = 0.2,
output_prefix) {
# (1) Extrai DEGs e mantém em memória
degs <- run_deseq_up_down_analysis(dds,
up_threshold   = up_threshold,
down_threshold = down_threshold,
padj_cutoff    = padj_cutoff,
output_file    = paste0(output_prefix, "_DEGs.xlsx"))
up_ids   <- na.omit(as.character(degs$up$Entrez_ID))
down_ids <- na.omit(as.character(degs$down$Entrez_ID))
# Determina o OrgDb
orgDb <- select_orgDb(unique(c(up_ids, down_ids)))
# Resultado em lista
enrich_results <- list()
# Inicia workbook para salvar todos os resultados
wb <- createWorkbook()
for(ont in ontologies) {
# up-regulated
ego_up <- enrichGO(gene          = up_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
enrich_results[[paste0("up_", ont)]] <- ego_up
sheet_up <- paste0("Up_", ont)
addWorksheet(wb, sheet_up)
writeData(wb, sheet_up, as.data.frame(ego_up))
pdf(paste0(output_prefix, "_", sheet_up, ".pdf"), width = 10, height = 8)
print(dotplot(ego_up, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Upregulated Genes")))
dev.off()
# down-regulated
ego_down <- enrichGO(gene          = down_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
enrich_results[[paste0("down_", ont)]] <- ego_down
sheet_down <- paste0("Down_", ont)
addWorksheet(wb, sheet_down)
writeData(wb, sheet_down, as.data.frame(ego_down))
pdf(paste0(output_prefix, "_", sheet_down, ".pdf"), width = 10, height = 8)
print(dotplot(ego_down, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Downregulated Genes")))
dev.off()
}
# Salva workbook com todas as abas
saveWorkbook(wb, paste0(output_prefix, "_Enrichment_GO.xlsx"), overwrite = TRUE)
message("GO enrichment (BP & MF) completed! Files saved with prefix: ", output_prefix)
# Retorna lista com objetos enrichResult
return(enrich_results)
}
up_down_enrich_results <- run_deseq_up_down_enrichment(dds = dds_list$Lmj_72h,
up_threshold = 1,
down_threshold = -1,
padj_cutoff = 0.05,
ontologies      = c("BP","MF"),
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.2,
output_file_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lmj_72h"))
run_deseq_up_down_enrichment <- function(dds,
up_threshold   = 1,
down_threshold = -1,
padj_cutoff    = 0.05,
ontologies     = c("BP","MF"),
pAdjustMethod  = "BH",
pvalueCutoff   = 0.05,
qvalueCutoff   = 0.2,
output_prefix) {
# (1) Extrai DEGs e mantém em memória
degs <- run_deseq_up_down_analysis(dds,
up_threshold   = up_threshold,
down_threshold = down_threshold,
padj_cutoff    = padj_cutoff,
output_file    = paste0(output_prefix, "_DEGs.xlsx"))
up_ids   <- na.omit(as.character(degs$up$Entrez_ID))
down_ids <- na.omit(as.character(degs$down$Entrez_ID))
# Determina o OrgDb
orgDb <- select_orgDb(unique(c(up_ids, down_ids)))
# Resultado em lista
enrich_results <- list()
# Inicia workbook para salvar todos os resultados
wb <- createWorkbook()
for(ont in ontologies) {
# up-regulated
ego_up <- enrichGO(gene          = up_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
enrich_results[[paste0("up_", ont)]] <- ego_up
sheet_up <- paste0("Up_", ont)
addWorksheet(wb, sheet_up)
writeData(wb, sheet_up, as.data.frame(ego_up))
pdf(paste0(output_prefix, "_", sheet_up, ".pdf"), width = 10, height = 8)
print(dotplot(ego_up, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Upregulated Genes")))
dev.off()
# down-regulated
ego_down <- enrichGO(gene          = down_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
enrich_results[[paste0("down_", ont)]] <- ego_down
sheet_down <- paste0("Down_", ont)
addWorksheet(wb, sheet_down)
writeData(wb, sheet_down, as.data.frame(ego_down))
pdf(paste0(output_prefix, "_", sheet_down, ".pdf"), width = 10, height = 8)
print(dotplot(ego_down, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Downregulated Genes")))
dev.off()
}
# Salva workbook com todas as abas
saveWorkbook(wb, paste0(output_prefix, "_Enrichment_GO.xlsx"), overwrite = TRUE)
message("GO enrichment (BP & MF) completed! Files saved with prefix: ", output_prefix)
# Retorna lista com objetos enrichResult
return(enrich_results)
}
up_down_enrich_results <- run_deseq_up_down_enrichment(dds = dds_list$Lmj_72h,
up_threshold = 1,
down_threshold = -1,
padj_cutoff = 0.05,
ontologies      = c("BP","MF"),
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.2,
output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lmj_72h"))
run_deseq_up_down_enrichment <- function(dds,
up_threshold   = 1,
down_threshold = -1,
padj_cutoff    = 0.05,
ontologies     = c("BP", "MF"),
pAdjustMethod  = "BH",
pvalueCutoff   = 0.05,
qvalueCutoff   = 0.2,
output_prefix) {
# (1) Extrai DEGs e salva em arquivo
degs <- run_deseq_up_down_analysis(dds,
up_threshold   = up_threshold,
down_threshold = down_threshold,
padj_cutoff    = padj_cutoff,
output_file    = paste0(output_prefix, "_DEGs.xlsx"))
up_ids   <- na.omit(as.character(degs$up$Entrez_ID))
down_ids <- na.omit(as.character(degs$down$Entrez_ID))
if (length(up_ids) == 0 && length(down_ids) == 0) {
stop("Nenhum gene upregulated ou downregulated encontrado para enriquecimento.")
}
# Determina o OrgDb
orgDb <- select_orgDb(unique(c(up_ids, down_ids)))
# Inicializa lista de resultados e workbook
enrich_results <- list()
wb <- createWorkbook()
for (ont in ontologies) {
# UPREGULATED
if (length(up_ids) > 0) {
ego_up <- tryCatch({
enrichGO(gene          = up_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
}, error = function(e) NULL)
if (!is.null(ego_up) && nrow(as.data.frame(ego_up)) > 0) {
enrich_results[[paste0("up_", ont)]] <- ego_up
sheet_up <- paste0("Up_", ont)
addWorksheet(wb, sheet_up)
writeData(wb, sheet_up, as.data.frame(ego_up))
pdf(paste0(output_prefix, "_", sheet_up, ".pdf"), width = 10, height = 8)
print(dotplot(ego_up, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Upregulated Genes")))
dev.off()
} else {
message("Nenhum termo enriquecido encontrado para genes upregulated (", ont, ").")
}
}
# DOWNREGULATED
if (length(down_ids) > 0) {
ego_down <- tryCatch({
enrichGO(gene          = down_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
}, error = function(e) NULL)
if (!is.null(ego_down) && nrow(as.data.frame(ego_down)) > 0) {
enrich_results[[paste0("down_", ont)]] <- ego_down
sheet_down <- paste0("Down_", ont)
addWorksheet(wb, sheet_down)
writeData(wb, sheet_down, as.data.frame(ego_down))
pdf(paste0(output_prefix, "_", sheet_down, ".pdf"), width = 10, height = 8)
print(dotplot(ego_down, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Downregulated Genes")))
dev.off()
} else {
message("Nenhum termo enriquecido encontrado para genes downregulated (", ont, ").")
}
}
}
# Salva workbook apenas se tiver conteúdo
if (length(wb$worksheets) > 0) {
saveWorkbook(wb, paste0(output_prefix, "_Enrichment_GO.xlsx"), overwrite = TRUE)
} else {
message("Nenhum resultado de enriquecimento foi salvo no Excel.")
}
message("GO enrichment (BP & MF) finalizado. Prefixo: ", output_prefix)
return(enrich_results)
}
Lmj_4h   = run_deseq_up_down_enrichment(dds = dds_list$Lmj_4h,   up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lmj_4h"))
Lmj_24h  = run_deseq_up_down_enrichment(dds = dds_list$Lmj_24h,  up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lmj_24h"))
Lmj_48h  = run_deseq_up_down_enrichment(dds = dds_list$Lmj_48h,  up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lmj_48h"))
Lmj_72h  = run_deseq_up_down_enrichment(dds = dds_list$Lmj_72h,  up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lmj_72h"))
Lama_24h = run_deseq_up_down_enrichment(dds = dds_list$Lama_24h, up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lama_24h"))
Lama_24h = run_deseq_up_down_enrichment(dds = dds_list$Lama_24h, up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lama_24h"))
Lama_48h = run_deseq_up_down_enrichment(dds = dds_list$Lama_48h, up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lama_48h"))
Lama_72h = run_deseq_up_down_enrichment(dds = dds_list$Lama_72h, up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lama_72h"))
Lama_4h   = run_deseq_up_down_enrichment(dds = dds_list$Lama_4h,   up_threshold = 1, down_threshold = -1, padj_cutoff = 0.05, ont = "BP", pAdjustMethod = "BH", pvalueCutoff = 0.05, qvalueCutoff = 0.2, output_prefix = file.path(results_dir, "DESeq2_UpDown__dds_Lama_4h"))
enrich_results <- list(
Lmj_4h, Lmj_24h ,Lmj_48h, Lmj_72h, Lama_4h
)
# Diretórios de saída
out_dirs <- purrr::map_chr(names(enrich_results), ~ file.path(results_dir, paste0("Enrichment_Analysis_", .x, "/")))
names(out_dirs) <- names(enrich_results)
# Executa a filtragem e exportação para cada resultado
walk(names(enrich_results), function(nome) {
resultado <- enrich_results[[nome]]
out_dir <- out_dirs[[nome]]
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
# Caminhos dos arquivos de saída
terms_file    <- file.path(out_dir, "enrichment_terms.xlsx")
targets_file  <- file.path(out_dir, "enrichment_targets.xlsx")
combined_file <- file.path(out_dir, "enrichment_combined.xlsx")
# Filtragem por termos
df_terms <- filter_and_augment(resultado, pat_keywords, TRUE)
write_by_category(df_terms, terms_file)
# Filtragem por genes-alvo
df_targets <- filter_and_augment(resultado, pat_genes, FALSE)
write_by_category(df_targets, targets_file)
# Combinação e exportação
df_combined <- bind_rows(df_terms, df_targets) %>%
distinct(category, ID, .keep_all = TRUE)
write_by_category(df_combined, combined_file)
})
out_dirs
enrich_results <- list(
Lmj_4h, Lmj_24h ,Lmj_48h, Lmj_72h, Lama_4h
)
# Diretórios de saída
out_dirs <- purrr::map_chr(names(enrich_results), ~ file.path(results_dir, paste0("Enrichment_Analysis_", .x, "/")))
names(out_dirs) <- names(enrich_results)
out_dirs
enrich_results
# Listas de resultados de enriquecimento
resultados <- list(
Lmj_4h = Lmj_4h,
Lmj_24h = Lmj_24h,
Lmj_48h = Lmj_48h,
Lmj_72h = Lmj_72h,
Lama_4h = Lama_4h
)
# Diretórios de saída correspondentes
diretorios_saida <- list(
Lmj_4h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_4h/",
Lmj_24h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_24h/",
Lmj_48h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_48h/",
Lmj_72h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_72h/",
Lama_4h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lama_4h/",
)
# Diretórios de saída correspondentes
diretorios_saida <- list(
Lmj_4h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_4h/",
Lmj_24h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_24h/",
Lmj_48h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_48h/",
Lmj_72h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lmj_72h/",
Lama_4h = "./Deseq2/PRJNA290995 - Leishmania/results/Enrichment_Analysis_Lama_4h/"
)
# Alvos de interesse
targets <- c(
"NAT10","HAT1","KAT2A","KAT2B","KAT5","KAT6A","KAT6B",
"KAT7","KAT8","KAT12","GTF3C4","CREBBP","aTAT1","p300",
"HDAC1","HDAC2","HDAC3","HDAC4","HDAC5","HDAC6","HDAC7",
"HDAC8","HDAC9","HDAC10","SIRT1","SIRT2","SIRT3","SIRT4",
"SIRT5","SIRT6","SIRT7"
)
# Palavras-chave para filtragem
keywords <- c(
"acetyltransferase","acetylation","desacetylation",
"histone lysine","histone","methyltransferase",
"deacetylase","histone deacetylase",
"lysine acetyltransferase","lysine"
)
# Padrões regex para filtragem
pat_genes <- paste0("\\b(", paste(targets, collapse = "|"), ")\\b")
pat_keywords <- paste(keywords, collapse = "|")
targets_up <- toupper(targets)
library(dplyr)
library(stringr)
library(purrr)
library(openxlsx)
# Extrai apenas os genes-alvo de um geneID “A/B/C…”
extract_targets <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
found <- parts[toupper(parts) %in% targets_up]
if (length(found) == 0) NA_character_ else paste(found, collapse = "/")
}
# Reordena geneID colocando os alvos na frente
reorder_genes <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
tgt <- parts[toupper(parts) %in% targets_up]
other <- parts[!toupper(parts) %in% targets_up]
paste(c(tgt, other), collapse = "/")
}
# Filtra e anexa colunas comuns
filter_and_augment <- function(results_list, pattern, on_desc = TRUE) {
map_dfr(names(results_list), function(cat) {
df <- as.data.frame(results_list[[cat]])
df$original_row <- seq_len(nrow(df))
df %>%
mutate(category = cat) %>%
filter(
if (on_desc) str_detect(Description, regex(pattern, ignore_case = TRUE))
else         str_detect(geneID, regex(pattern, ignore_case = TRUE))
) %>%
mutate(
only_targets = vapply(geneID, extract_targets, FUN.VALUE = character(1)),
geneID_reorder = vapply(geneID, reorder_genes, FUN.VALUE = character(1))
)
})
}
# Escreve abas de um data.frame dividido por “category”
write_by_category <- function(df, path) {
wb <- createWorkbook()
df %>% split(.$category) %>%
iwalk(~{
addWorksheet(wb, .y)
writeData(wb, .y, .x)
})
saveWorkbook(wb, path, overwrite = TRUE)
}
# Itera sobre cada conjunto de resultados
walk(names(resultados), function(nome) {
resultado <- resultados[[nome]]
out_dir <- diretorios_saida[[nome]]
# Cria o diretório de saída, se não existir
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
# Define os caminhos dos arquivos de saída
terms_file <- file.path(out_dir, "enrichment_terms.xlsx")
targets_file <- file.path(out_dir, "enrichment_targets.xlsx")
combined_file <- file.path(out_dir, "enrichment_combined.xlsx")
# (A) Enriquecimento apenas por termos
df_terms <- filter_and_augment(resultado, pat_keywords, TRUE)
write_by_category(df_terms, terms_file)
# (B) Enriquecimento apenas por genes-alvo
df_targets <- filter_and_augment(resultado, pat_genes, FALSE)
write_by_category(df_targets, targets_file)
# (C) União (termos ∪ targets), sem duplicar entradas por category+ID
df_combined <- bind_rows(df_terms, df_targets) %>%
distinct(category, ID, .keep_all = TRUE)
write_by_category(df_combined, combined_file)
})
