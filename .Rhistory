for (contrast_formula in comparisons) {
contrast_mat <- makeContrasts(contrasts=contrast_formula, levels=mod)
contrast_fit <- contrasts.fit(fit, contrast_mat)
eb <- eBayes(contrast_fit)
# Obter os genes significativos
sig_genes <- union(sig_genes, rownames(topTable(eb, number=Inf, p.value=0.05)))
}
for (contrast_formula in comparisons) {
contrast_mat <- makeContrasts(contrasts=contrast_formula, levels=mod)
contrast_fit <- contrasts.fit(fit, contrast_mat)
eb <- eBayes(contrast_fit)
# Obter os genes significativos
sig_genes <- union(sig_genes, rownames(topTable(eb, number=Inf, p.value=0.5)))
}
for (contrast_formula in comparisons) {
contrast_mat <- makeContrasts(contrasts=contrast_formula, levels=mod)
contrast_fit <- contrasts.fit(fit, contrast_mat)
eb <- eBayes(contrast_fit)
# Obter os genes significativos
sig_genes <- union(sig_genes, rownames(topTable(eb, number=Inf, p.value=0.005)))
}
# Iterar sobre os contrastes
sig_genes <- c()
for (contrast_formula in comparisons) {
contrast_mat <- makeContrasts(contrasts=contrast_formula, levels=mod)
contrast_fit <- contrasts.fit(fit, contrast_mat)
eb <- eBayes(contrast_fit)
# Obter os genes significativos
sig_genes <- union(sig_genes, rownames(topTable(eb, number=Inf, p.value=0.005)))
}
# Iterar sobre os contrastes
sig_genes <- c()
for (contrast_formula in comparisons) {
contrast_mat <- makeContrasts(contrasts=contrast_formula, levels=mod)
contrast_fit <- contrasts.fit(fit, contrast_mat)
eb <- eBayes(contrast_fit)
# Obter os genes significativos
sig_genes <- union(sig_genes, rownames(topTable(eb, number=Inf, p.value=0.05)))
}
# Iterar sobre os contrastes
sig_genes <- c()
for (contrast_formula in comparisons) {
contrast_mat <- makeContrasts(contrasts=contrast_formula, levels=mod)
contrast_fit <- contrasts.fit(fit, contrast_mat)
eb <- eBayes(contrast_fit)
# Obter os genes significativos
sig_genes <- union(sig_genes, rownames(topTable(eb, number=Inf, p.value=0.5)))
}
# Filtrar os genes significativos
log_counts <- log_counts[rownames(log_counts) %in% sig_genes,]
# Filter out genes which were not differentially expressed for any contrast
log_counts <- log_counts[rownames(log_counts) %in% sig_genes,]
library(knitr)
library(limma)
library(reshape2)
library(RColorBrewer)
library(ggplot2)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
power <- c(c(1:10), seq(from = 12, to = 50, by = 2))
# Call the network topology analysis function
sft <- pickSoftThreshold(log_counts,
powerVector = power,
networkType = "signed",
verbose = 5)
# Call the network topology analysis function
sft <- pickSoftThreshold(log_counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
#'
#' Similarity measure which combines elements from Pearson correlation and
#' Euclidean distance.
#'
cordist <- function(dat) {
cor_matrix  <- cor(t(dat))
dist_matrix <- as.matrix(dist(dat, diag=TRUE, upper=TRUE))
dist_matrix <- log1p(dist_matrix)
dist_matrix <- 1 - (dist_matrix / max(dist_matrix))
sign(cor_matrix) * ((abs(cor_matrix) + dist_matrix)/ 2)
sim_matrix <- cordist(log_counts)
sim_matrix
heatmap_indices <- sample(nrow(sim_matrix))
heatmap.2(t(sim_matrix[heatmap_indices, heatmap_indices]),
col=redgreen(75),
labRow=NA, labCol=NA,
trace='none', dendrogram='row',
xlab='Gene', ylab='Gene',
main='Similarity matrix',
density.info='none', revC=TRUE)
print("dsa")
#'
#' Similarity measure which combines elements from Pearson correlation and
#' Euclidean distance.
#'
cordist <- function(dat) {
cor_matrix  <- cor(t(dat))
dist_matrix <- as.matrix(dist(dat, diag=TRUE, upper=TRUE))
dist_matrix <- log1p(dist_matrix)
dist_matrix <- 1 - (dist_matrix / max(dist_matrix))
sign(cor_matrix) * ((abs(cor_matrix) + dist_matrix)/ 2)
sim_matrix <- cordist(log_counts)
sim_matrix
heatmap_indices <- sample(nrow(sim_matrix))
sim_matrix
heatmap_indices <- sample(nrow(sim_matrix))
heatmap.2(t(sim_matrix[heatmap_indices, heatmap_indices]),
col=redgreen(75),
labRow=NA, labCol=NA,
trace='none', dendrogram='row',
xlab='Gene', ylab='Gene',
main='Similarity matrix',
density.info='none', revC=TRUE)
# first, let's remove any genes with _zero_ variance since these are not
# going to help us, and may cause problems with some of the models
log_counts <- log_counts[apply(log_counts, 1, var) > 0,]
# create design matrix for differential expression analysis;
# if you wanted to account for batch here, you could simply include a batch
# term in the linear model at this step, e.g.:
# mod <- model.matrix(~0+samples$condition+samples$batch)
mod <- model.matrix(~0+samples$Treatment)
# make model terms easier to work with
colnames(mod) <- levels(samples$Treatment)
fit <- lmFit(log_counts, design=mod)
####
# Certifique-se de que 'samples$condition' seja um fator
samples$condition <- factor(samples$Treatment)
# Agora, você pode gerar a lista de contrastes
condition_pairs <- t(combn(levels(samples$condition), 2))
####
# generate a list of all possible pairwise contrasts
condition_pairs <- t(combn(levels(samples$condition), 2))
comparisons <- list()
for (i in 1:nrow(condition_pairs)) {
comparisons[[i]] <- as.character(condition_pairs[i,])
}
# vector to store de genes
sig_genes <- c()
sig_genes
# iterate over the contrasts, and perform a differential expression test for
# each pair
samples$condition <- factor(samples$condition)
# Criação da matriz de design
mod <- model.matrix(~0 + samples$condition)
colnames(mod) <- levels(samples$condition)
# Gerar os pares de contrastes
condition_pairs <- t(combn(levels(samples$condition), 2))
comparisons <- apply(condition_pairs, 1, function(x) paste(x, collapse=' - '))
# Iterar sobre os contrastes
sig_genes <- c()
for (contrast_formula in comparisons) {
contrast_mat <- makeContrasts(contrasts=contrast_formula, levels=mod)
contrast_fit <- contrasts.fit(fit, contrast_mat)
eb <- eBayes(contrast_fit)
# Obter os genes significativos
sig_genes <- union(sig_genes, rownames(topTable(eb, number=Inf, p.value=0.5)))
}
# Filtrar os genes significativos
log_counts <- log_counts[rownames(log_counts) %in% sig_genes,]
# Filter out genes which were not differentially expressed for any contrast
log_counts <- log_counts[rownames(log_counts) %in% sig_genes,]
library(knitr)
library(limma)
library(reshape2)
library(RColorBrewer)
library(ggplot2)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
power <- c(c(1:10), seq(from = 12, to = 50, by = 2))
# Call the network topology analysis function
sft <- pickSoftThreshold(log_counts,
powerVector = power,
networkType = "signed",
verbose = 5)
sft.data <- sft$fitIndices
# visualization to pick power
a1 <- ggplot(sft.data, aes(Power, SFT.R.sq, label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
geom_hline(yintercept = 0.8, color = 'red') +
labs(x = 'Power', y = 'Scale free topology model fit, signed R^2') +
theme_classic()
a2 <- ggplot(sft.data, aes(Power, mean.k., label = Power)) +
geom_point() +
geom_text(nudge_y = 0.1) +
labs(x = 'Power', y = 'Mean Connectivity') +
theme_classic()
grid.arrange(a1, a2, nrow = 2)
#'
#' Similarity measure which combines elements from Pearson correlation and
#' Euclidean distance.
#'
cordist <- function(dat) {
cor_matrix  <- cor(t(dat))
dist_matrix <- as.matrix(dist(dat, diag=TRUE, upper=TRUE))
dist_matrix <- log1p(dist_matrix)
dist_matrix <- 1 - (dist_matrix / max(dist_matrix))
sign(cor_matrix) * ((abs(cor_matrix) + dist_matrix)/ 2)
}
sim_matrix <- cordist(log_counts)
sim_matrix
heatmap_indices <- sample(nrow(sim_matrix))
heatmap.2(t(sim_matrix[heatmap_indices, heatmap_indices]),
col=redgreen(75),
labRow=NA, labCol=NA,
trace='none', dendrogram='row',
xlab='Gene', ylab='Gene',
main='Similarity matrix',
density.info='none', revC=TRUE)
# Construct adjacency matrix
adj_matrix <- adjacency.fromSimilarity(sim_matrix, power=12, type='signed')
# Delete similarity matrix to free up memory
rm(sim_matrix)
gc()
# Convert to matrix
gene_ids <- rownames(adj_matrix)
adj_matrix <- matrix(adj_matrix, nrow=nrow(adj_matrix))
rownames(adj_matrix) <- gene_ids
colnames(adj_matrix) <- gene_ids
heatmap.2(t(adj_matrix[heatmap_indices, heatmap_indices]),
col=redgreen(75),
labRow=NA, labCol=NA,
trace='none', dendrogram='row',
xlab='Gene', ylab='Gene',
main='Adjacency matrix',
density.info='none', revC=TRUE)
print("dsf")
# Cluster gene expression profiles; the flashClust function from
# the authors of WGCNA is another options for larger datasets.
# For input, we use the reciprocal of the adjacency matrix; hierarchical
# clustering works by comparing the _distance_ between objects instead of the
# _similarity_.
gene_tree <- hclust(as.dist(1 - adj_matrix), method="average")
# we will use the cuttreeDynamicTree method to break apart the hc dendrogram
# into separate modules
module_labels <- cutreeDynamicTree(dendro=gene_tree, minModuleSize=15,
deepSplit=TRUE)
# assign a color to each module for easier visualization and referencing
module_colors <- labels2colors(module_labels)
#' Converts an adjaceny matrix along with some optional vertex and edge
#'  information to a GraphML graph and saves it to disk.
#'
#' @param adj_mat An n-by-n weighted or unweighted adjacency matrix normalized
#' to contain values between 0 and 1.
#' @param filename Name of file to save output to. If file already exists it
#' will be overwritten. (default: network.graphml)
#' @param weighted Whether or not the adjacency matrix should be treated as a
#' weighted graph. (default: TRUE)
#' @param threshold For weighted networks, if a threshold value between 0 and
#' 1 is specified, all edges with weights below that value with be dropped from
#'   the graph. (default: 0.5)
#' @param max_edge_ratio The maximum number of edges per node in the network to
#' allow. If the number of edges that would remain for the specified threshold
#' exceeds this value, the threshold will be raised to reduce the number of
#' edges remaining. (default: 3)
#' @param nodeAttr A vector with length equal to the number of vertices in the
#' network, where the ith entry in the vector corresponds to some numeric or
#' string annotation that should be associated with the ith node in the
#' adjacency matrix. (default: NULL)
#' @param nodeAttrDataFrame A data frame containing one or more columns
#' associated with the vertices in the graph.  The ith row of the dataframe
#' should correspond to the ith entry in the adjacency matrix. (default: NULL)
#' @param edgeAttributes Extra attributes to associate with the graph edges,
#' formatted as a list of matrices of the same dimension and names as the
#' adjacency matrix.
#'
#' Examples
#' --------
#' export_network_to_graphml(adj_mat, filename='~/network.graphml',
#'                           threshold=0.3, nodeAttrDataFrame=df)
#'
#' See Also
#' --------
#' 1. http://www.inside-r.org/packages/cran/WGCNA/docs/exportNetworkToCytoscape
#' 2. http://graphml.graphdrawing.org/
#'
#' Returns
#' -------
#' An igraph graph object representing the exported graph.
export_network_to_graphml <- function (adj_mat, filename=NULL, weighted=TRUE,
threshold=0.5, max_edge_ratio=3,
nodeAttr=NULL, nodeAttrDataFrame=NULL,
edgeAttributes=NULL, verbose=FALSE) {
library('igraph')
# Determine filename to use
if (is.null(filename)) {
filename='/Users/carlitos/Desktop/network.graphml'
}
# TODO 2015/04/09
# Add option to rescale correlations for each module before applying
# threshold (this is simpler than the previous approach of trying to
# determine a different threshold for each module)
#
# Still, modules with very low correlations should be given somewhat
# less priority than those with very high correlations.
#module_colors <- unique(nodeAttrDataFrame$color)
#module_genes <- which(nodeAttrDataFrame$color == color)
#module_adjmat <- adj_mat[module_genes,]
#num_genes <- length(module_genes)
# Adjust threshold if needed to limit remaining edges
max_edges <- max_edge_ratio * nrow(adj_mat)
edge_to_total_ratio <- max_edges / length(adj_mat)
edge_limit_cutoff <- as.numeric(quantile(abs(adj_mat), 1 - edge_to_total_ratio))
# Also choose a minimum threshold to make sure that at least some edges
# are left
min_threshold <- as.numeric(quantile(abs(adj_mat), 0.9999))
threshold <- min(min_threshold, max(threshold, edge_limit_cutoff))
# Remove edges with weights lower than the cutoff
adj_mat[abs(adj_mat) < threshold] <- 0
# Drop any genes with no edges (TODO: Make optional)
orphaned <- (colSums(adj_mat) == 0)
adj_mat <- adj_mat[!orphaned, !orphaned]
# Also remove annotation entries
if (!is.null(nodeAttr)) {
nodeAttr <- nodeAttr[!orphaned]
}
if (!is.null(nodeAttrDataFrame)) {
nodeAttrDataFrame <- nodeAttrDataFrame[!orphaned,]
}
# Keep track of non-positive edges and rescale to range 0,1
is_zero     <- adj_mat == 0
is_negative <- adj_mat < 0
adj_mat <- (abs(adj_mat) - threshold) / (max(adj_mat) - threshold)
adj_mat[is_zero] <- 0
adj_mat[is_negative] <- -adj_mat[is_negative]
if (verbose) {
message(sprintf("Outputting matrix with %d nodes and %d edges",
nrow(adj_mat), sum(adj_mat > 0)))
}
# Create a new graph and add vertices
# Weighted graph
if (weighted) {
g <- graph.adjacency(adj_mat, mode='undirected', weighted=TRUE, diag=FALSE)
} else {
adj_mat[adj_mat != 0] <- 1
g <- graph.adjacency(adj_mat, mode='undirected', diag=FALSE)
}
# Add single node annotation from vector
if (!is.null(nodeAttr)) {
g <- set.vertex.attribute(g, "attr", value=nodeAttr)
}
# Add node one or more node annotations from a data frame
if (!is.null(nodeAttrDataFrame)) {
for (colname in colnames(nodeAttrDataFrame)) {
g <- set.vertex.attribute(g, colname, value=nodeAttrDataFrame[,colname])
}
}
edge_correlation_negative <- c()
# neg_correlations[edge_list]
edge_list <- get.edgelist(g)
for (i in 1:nrow(edge_list)) {
from <- edge_list[i, 1]
to   <- edge_list[i, 2]
}
# Save graph to a file
write.graph(g, filename, format='graphml')
# return igraph
return(g)
}
# use OrganismDb to retrieve gene annotations
gene_info <- select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
# use OrganismDb to retrieve gene annotations
log_counts
View(log_counts)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
colnames(gene_info) <- c('gene_id', 'description', 'chr', 'strand')
View(gene_info)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME'))
View(gene_info)
gene_info <- AnnotationDbi::select(Homo.sapiens, keytype='ENTREZID', keys=rownames(log_counts),
columns=c('TXCHROM', 'TXSTRAND', 'GENENAME', 'SYMBOL' ))
View(gene_info)
colnames(gene_info) <- c('gene_id', 'description','SYMBOL', 'chr', 'strand')
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
module_colors
gene_info <- cbind(gene_info, module=module_colors)
# Include RGB versions of module colors for better assignment in Cytoscape
gene_info$color_rgb <- col2hex(gene_info$module)
# first, it's a good idea to check the distribution of edges weights in our
# correlation matrix. This will help us choose a reasonable cutoff for
# exporting the network.
g <- export_network_to_graphml(adj_matrix, filename='/Users/carlitos/Desktop/networkmais novo.graphml',
threshold=0.4, nodeAttrDataFrame=gene_info)
# for now, just grab the description for the first transcript
gene_info <- gene_info[!duplicated(gene_info$gene_id),]
module_colors
gene_info <- cbind(gene_info, module=module_colors)
# Include RGB versions of module colors for better assignment in Cytoscape
gene_info$color_rgb <- col2hex(gene_info$module)
# first, it's a good idea to check the distribution of edges weights in our
# correlation matrix. This will help us choose a reasonable cutoff for
# exporting the network.
g <- export_network_to_graphml(adj_matrix, filename='/Users/carlitos/Desktop/networkmais novo.graphml',
threshold=0.4, nodeAttrDataFrame=gene_info)
View(g)
setwd("/Users/carlitos/Desktop/RNA-seq/")
setwd("/Users/carlitos/Desktop/RNA-seq/")
# setwd("/Users/carlitos/Documents/")
library(dplyr)
library(ggrepel)
library(biomaRt)
library(dplyr)
library(tidyr)
library(dplyr)
library(biomaRt)
library(dplyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(CorLevelPlot)
library(gridExtra)
library(stringr)
library(readxl)
library(openxlsx)
library(org.Hs.eg.db)
tabular_dir  <- "Deseq2/SRP377060 - Leishmania/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))  # Renomeia a coluna "counts" para o nome do arquivo
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) = combined_df$Geneid
combined_df = combined_df[,-1]
data = combined_df
colnames(data)
colnames(data)
# dados da amostra
phenoData  <-  read_excel("Deseq2/SRP377060 - Leishmania/SRP377060.xlsx", col_names = TRUE)
lista  <- phenoData$id
phenoData <- phenoData[,-1]
rownames(phenoData) <- lista
View(phenoData)
data
phenoData
head(data)
phenoData
head(data)
phenoData
gsg <- goodSamplesGenes(t(data))
summary(gsg)
gsg$allOK
table(gsg$goodGenes)
table(gsg$goodSamples)
# remove genes that are detectd as outliers
data <- data[gsg$goodGenes == TRUE,]
# detect outlier samples - hierarchical clustering - method 1
htree <- hclust(dist(t(data)), method = "average")
plot(htree)
###########################################################
# pca - method 2
pca <- prcomp(t(data))
pca.dat <- pca$x
pca.var <- pca$sdev^2
pca.var.percent <- round(pca.var/sum(pca.var)*100, digits = 2)
pca.dat <- as.data.frame(pca.dat)
ggplot(pca.dat, aes(PC1, PC2)) +
geom_point() +
geom_text(label = rownames(pca.dat)) +
labs(x = paste0('PC1: ', pca.var.percent[1], ' %'),
y = paste0('PC2: ', pca.var.percent[2], ' %'))
###########################################################
colnames(data)
