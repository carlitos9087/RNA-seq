# Converte os dados para uma matriz numérica
data <- as.matrix(combined_df)
storage.mode(data) <- "numeric"
# Remove as amostras indesejadas da matriz de contagem
data <- data[, !(colnames(data) %in% samples_to_remove)]
print(colnames(data))
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
lista <- phenoData$id
phenoData <- phenoData[,-1]    # Remove a coluna "id"
rownames(phenoData) <- lista    # Define os nomes das linhas como os ids
# Remove as amostras indesejadas do phenoData
phenoData <- phenoData[!(phenoData$SampleName %in% samples_to_remove), ]
head(phenoData)
View(phenoData)
# install.packages("VennDiagram")
# Define o diretório de trabalho
setwd("/Users/carlitos/Desktop/RNA-seq/")
# Carregando os pacotes necessários
library(dplyr)
library(ggrepel)
library(biomaRt)
library(tidyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(gridExtra)
library(stringr)
library(readxl)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(ggplot2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(VennDiagram)
###########################################
# 0. Remoção de amostras indesejadas
###########################################
# Lista de amostras que serão removidas
samples_to_remove <- c("DC_Infected_Live_Parasites_3_SRR19400242",
"DC_Infected_Fixed_Parasites_3_SRR19400239")
###########################################
# 1. Leitura e combinação dos arquivos tabulares
###########################################
tabular_dir  <- "Deseq2/SRP009251 - Leishmania/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
# Renomeia a coluna de contagem para o nome do arquivo (sem extensão)
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) <- combined_df$Geneid
combined_df <- combined_df[,-1]
# Converte os dados para uma matriz numérica
data <- as.matrix(combined_df)
storage.mode(data) <- "numeric"
# Remove as amostras indesejadas da matriz de contagem
data <- data[, !(colnames(data) %in% samples_to_remove)]
print(colnames(data))
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
lista <- phenoData$id
phenoData <- phenoData[,-1]    # Remove a coluna "id"
rownames(phenoData) <- lista    # Define os nomes das linhas como os ids
# Remove as amostras indesejadas do phenoData
phenoData <- phenoData[!(phenoData$SampleName %in% samples_to_remove), ]
head(phenoData)
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
View(phenoData)
# install.packages("VennDiagram")
# Define o diretório de trabalho
setwd("/Users/carlitos/Desktop/RNA-seq/")
# Carregando os pacotes necessários
library(dplyr)
library(ggrepel)
library(biomaRt)
library(tidyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(gridExtra)
library(stringr)
library(readxl)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(ggplot2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(VennDiagram)
###########################################
# 0. Remoção de amostras indesejadas
###########################################
# Lista de amostras que serão removidas
samples_to_remove <- c("DC_Infected_Live_Parasites_3_SRR19400242",
"DC_Infected_Fixed_Parasites_3_SRR19400239")
###########################################
# 1. Leitura e combinação dos arquivos tabulares
###########################################
tabular_dir  <- "Deseq2/SRP009251 - Leishmania/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
# Renomeia a coluna de contagem para o nome do arquivo (sem extensão)
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) <- combined_df$Geneid
combined_df <- combined_df[,-1]
# Converte os dados para uma matriz numérica
data <- as.matrix(combined_df)
storage.mode(data) <- "numeric"
# Remove as amostras indesejadas da matriz de contagem
data <- data[, !(colnames(data) %in% samples_to_remove)]
print(colnames(data))
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
View(phenoData)
e trabalho
e trabalho
# install.packages("VennDiagram")
# Define o diretório de trabalho
setwd("/Users/carlitos/Desktop/RNA-seq/")
# Carregando os pacotes necessários
library(dplyr)
library(ggrepel)
library(biomaRt)
library(tidyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(gridExtra)
library(stringr)
library(readxl)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(ggplot2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(VennDiagram)
###########################################
# 0. Remoção de amostras indesejadas
###########################################
# Lista de amostras que serão removidas
samples_to_remove <- c("DC_Infected_Live_Parasites_3_SRR19400242",
"DC_Infected_Fixed_Parasites_3_SRR19400239")
###########################################
# 1. Leitura e combinação dos arquivos tabulares
###########################################
tabular_dir  <- "Deseq2/SRP009251 - Leishmania/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
# Renomeia a coluna de contagem para o nome do arquivo (sem extensão)
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) <- combined_df$Geneid
combined_df <- combined_df[,-1]
# Converte os dados para uma matriz numérica
data <- as.matrix(combined_df)
storage.mode(data) <- "numeric"
# Remove as amostras indesejadas da matriz de contagem
data <- data[, !(colnames(data) %in% samples_to_remove)]
print(colnames(data))
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
lista <- phenoData$id
phenoData <- phenoData[,-1]    # Remove a coluna "id"
rownames(phenoData) <- lista    # Define os nomes das linhas como os ids
# Remove as amostras indesejadas do phenoData
phenoData <- phenoData[!(phenoData$SampleName %in% samples_to_remove), ]
head(phenoData)
###########################################
# 3. QC - Detecção de outliers com WGCNA
###########################################
gsg <- goodSamplesGenes(t(data))
summary(gsg)
View(phenoData)
# install.packages("VennDiagram")
# Define o diretório de trabalho
setwd("/Users/carlitos/Desktop/RNA-seq/")
# Carregando os pacotes necessários
library(dplyr)
library(ggrepel)
library(biomaRt)
library(tidyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(gridExtra)
library(stringr)
library(readxl)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(ggplot2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(VennDiagram)
###########################################
# 0. Remoção de amostras indesejadas
###########################################
# Lista de amostras que serão removidas
samples_to_remove <- c("DC_Infected_Live_Parasites_3_SRR19400242",
"DC_Infected_Fixed_Parasites_3_SRR19400239")
###########################################
# 1. Leitura e combinação dos arquivos tabulares
###########################################
tabular_dir  <- "Deseq2/SRP009251 - Leishmania/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
# Renomeia a coluna de contagem para o nome do arquivo (sem extensão)
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) <- combined_df$Geneid
combined_df <- combined_df[,-1]
# Converte os dados para uma matriz numérica
data <- as.matrix(combined_df)
storage.mode(data) <- "numeric"
# Remove as amostras indesejadas da matriz de contagem
data <- data[, !(colnames(data) %in% samples_to_remove)]
print(colnames(data))
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
lista <- phenoData$id
phenoData <- phenoData[,-2]    # Remove a coluna "id"
rownames(phenoData) <- lista    # Define os nomes das linhas como os ids
# Remove as amostras indesejadas do phenoData
phenoData <- phenoData[!(phenoData$SampleName %in% samples_to_remove), ]
head(phenoData)
View(data)
View(phenoData)
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
lista <- phenoData$id
phenoData <- phenoData[,-1,-2]    # Remove a coluna "id"
rownames(phenoData) <- lista    # Define os nomes das linhas como os ids
# Remove as amostras indesejadas do phenoData
phenoData <- phenoData[!(phenoData$SampleName %in% samples_to_remove), ]
head(phenoData)
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
lista <- phenoData$id
phenoData <- phenoData[,-1]
phenoData <- phenoData[,-1]# Remove a coluna "id"
rownames(phenoData) <- lista    # Define os nomes das linhas como os ids
# Remove as amostras indesejadas do phenoData
phenoData <- phenoData[!(phenoData$SampleName %in% samples_to_remove), ]
head(phenoData)
###########################################
# 3. QC - Detecção de outliers com WGCNA
###########################################
gsg <- goodSamplesGenes(t(data))
summary(gsg)
print(gsg$allOK)
table(gsg$goodGenes)
table(gsg$goodSamples)
# Remove os genes identificados como outliers
data <- data[gsg$goodGenes, ]
# Função para Sample-to-Sample Distances com alta resolução
run_sample_distances <- function(dds, output_file) {
rld <- rlog(dds, blind = TRUE)
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- colnames(dds)
colnames(sampleDistMatrix) <- colnames(dds)
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sampleDistMatrix, col = colors, filename = output_file,
width = 8, height = 6, units = "in", res = 300)
}
# Função para o gráfico de Dispersion Estimates com alta resolução
run_dispersion_plot <- function(dds, output_file) {
dir.create(dirname(output_file), recursive = TRUE, showWarnings = FALSE)
png(filename = output_file, width = 8, height = 6, units = "in", res = 300)
plotDispEsts(dds)
dev.off()
}
# Função para gerar o Histograma de p-values com alta resolução
run_pval_histogram <- function(dds, output_file) {
dir.create(dirname(output_file), recursive = TRUE, showWarnings = FALSE)
res <- results(dds)
png(filename = output_file, width = 8, height = 6, units = "in", res = 300)
hist(res$pvalue,
breaks = 50,
col = "skyblue",
main = "Histogram of p-values",
xlab = "p-value")
dev.off()
}
run_pca_analysis <- function(dds, output_file) {
rld <- rlog(dds, blind = TRUE)
pca_data <- plotPCA(rld, intgroup = "Treatment", returnData = TRUE)
pca_variance <- attr(pca_data, "percentVar")
write.xlsx(pca_data, file = sub(".jpeg", ".xlsx", output_file))
p <- ggplot(pca_data, aes(PC1, PC2, color = Treatment, label = rownames(pca_data))) +
geom_point(size = 3) +
geom_text_repel(size = 3, max.overlaps = 10) +
xlab(paste0("PC1: ", round(pca_variance[1] * 100, 2), "% variance")) +
ylab(paste0("PC2: ", round(pca_variance[2] * 100, 2), "% variance")) +
theme_minimal()
ggsave(output_file, p, width = 6, height = 5, dpi = 300)
return(p)
}
# Função para detectar o organismo com base nos IDs
detect_organism <- function(entrez_ids) {
# Verifica se os IDs pertencem ao organismo humano ou camundongo
hs_ids <- keys(org.Hs.eg.db, keytype = "ENTREZID")
mm_ids <- keys(org.Mm.eg.db, keytype = "ENTREZID")
if (any(entrez_ids %in% hs_ids)) {
return("Homo sapiens")
} else if (any(entrez_ids %in% mm_ids)) {
return("Mus musculus")
} else {
stop("Organismo não reconhecido para os IDs fornecidos.")
}
}
# Função para mapear IDs Entrez para símbolos de genes, ignorando erros
convert_entrez_to_symbol <- function(entrez_ids) {
organism <- tryCatch(detect_organism(entrez_ids), error = function(e) NA)
if (is.na(organism)) {
warning("Nenhum organismo reconhecido. IDs serão ignorados.")
return(rep(NA, length(entrez_ids)))
}
gene_symbols <- tryCatch({
if (organism == "Homo sapiens") {
mapIds(org.Hs.eg.db, keys = as.character(entrez_ids),
column = "SYMBOL", keytype = "ENTREZID", multiVals = "first")
} else {
mapIds(org.Mm.eg.db, keys = as.character(entrez_ids),
column = "SYMBOL", keytype = "ENTREZID", multiVals = "first")
}
}, error = function(e) {
warning("Erro ao mapear IDs. Alguns genes podem estar ausentes.")
return(rep(NA, length(entrez_ids)))
})
return(gene_symbols)
}
run_volcano_plot <- function(dds, output_file, pval_threshold = 0.05, log2fc_threshold = 1) {
dir.create(dirname(output_file), recursive = TRUE, showWarnings = FALSE)
res <- results(dds)
res_df <- na.omit(as.data.frame(res))
res_df$GeneID <- rownames(res_df)  # Mantém os IDs Entrez
# Converte IDs Entrez para símbolos de genes
res_df$Gene <- convert_entrez_to_symbol(res_df$GeneID)
res_df$Significance <- "Not Significant"
res_df$Significance[res_df$pvalue < pval_threshold & abs(res_df$log2FoldChange) >= log2fc_threshold] <- "Significant"
res_df$Color <- ifelse(res_df$Significance == "Significant", ifelse(res_df$log2FoldChange > 0, "red", "blue"), "grey")
write.xlsx(res_df, file = sub(".jpeg", ".xlsx", output_file), rowNames = FALSE)
top_genes <- res_df[res_df$Significance == "Significant" & res_df$pvalue < 0.01, ]
p <- ggplot(res_df, aes(x = log2FoldChange, y = -log10(pvalue), color = Color, label = Gene)) +
geom_point(alpha = 0.7, size = 2) +
scale_color_manual(values = c("red" = "red", "blue" = "blue", "grey" = "grey")) +
geom_hline(yintercept = -log10(pval_threshold), linetype = "dashed", color = "black") +
geom_vline(xintercept = c(-log2fc_threshold, log2fc_threshold), linetype = "dashed", color = "black") +
xlab("Log2 Fold Change") +
ylab("-Log10 P-value") +
ggtitle("Volcano Plot") +
theme_minimal() +
theme(legend.position = "none") +
geom_text_repel(data = top_genes, aes(label = Gene), size = 3, max.overlaps = 10)
ggsave(output_file, p, width = 8, height = 6, dpi = 300)
return(p)
}
run_ma_plot <- function(dds, output_file) {
dir.create(dirname(output_file), recursive = TRUE, showWarnings = FALSE)
res <- results(dds)
res_df <- as.data.frame(res)
res_df$GeneID <- rownames(res_df)  # Mantém os IDs Entrez
# Converte IDs Entrez para símbolos de genes
res_df$Gene <- convert_entrez_to_symbol(res_df$GeneID)
res_df$Significance <- "Not Significant"
res_df$Significance[res_df$padj < 0.05] <- "Significant"
res_df$Color <- "grey"
res_df$Color[res_df$padj < 0.05 & res_df$log2FoldChange > 0] <- "red"
res_df$Color[res_df$padj < 0.05 & res_df$log2FoldChange < 0] <- "blue"
write.xlsx(res_df, file = sub(".jpeg", ".xlsx", output_file), rowNames = FALSE)
top_genes <- res_df[abs(res_df$log2FoldChange) > 2 & res_df$padj < 0.05, ]
p <- ggplot(res_df, aes(x = log10(baseMean), y = log2FoldChange, color = Color, label = Gene)) +
geom_point(alpha = 0.7, size = 2) +
scale_color_manual(values = c("red" = "red", "blue" = "blue", "grey" = "grey")) +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
xlab("Log10 Mean Expression") +
ylab("Log2 Fold Change") +
ggtitle("MA-plot") +
theme_minimal() +
theme(legend.position = "none") +
geom_text_repel(data = top_genes, aes(label = Gene), size = 3, max.overlaps = 10)
ggsave(output_file, p, width = 8, height = 6, dpi = 300)
return(p)
}
phenoData
View(phenoData)
# install.packages("VennDiagram")
# Define o diretório de trabalho
setwd("/Users/carlitos/Desktop/RNA-seq/")
# Carregando os pacotes necessários
library(dplyr)
library(ggrepel)
library(biomaRt)
library(tidyr)
library(WGCNA)
library(DESeq2)
library(GEOquery)
library(tidyverse)
library(gridExtra)
library(stringr)
library(readxl)
library(openxlsx)
library(pheatmap)
library(RColorBrewer)
library(ggplot2)
library(AnnotationDbi)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(VennDiagram)
###########################################
# 0. Remoção de amostras indesejadas
###########################################
# Lista de amostras que serão removidas
samples_to_remove <- c("DC_Infected_Live_Parasites_3_SRR19400242",
"DC_Infected_Fixed_Parasites_3_SRR19400239")
###########################################
# 1. Leitura e combinação dos arquivos tabulares
###########################################
tabular_dir  <- "Deseq2/SRP009251 - Leishmania/"
tabular_files <- list.files(path = tabular_dir, pattern = "\\.tabular$", full.names = TRUE)
read_tabular_file <- function(file) {
df <- read.table(file, header = TRUE, stringsAsFactors = FALSE, sep="\t")
# Renomeia a coluna de contagem para o nome do arquivo (sem extensão)
colnames(df)[2] <- tools::file_path_sans_ext(basename(file))
return(df)
}
tabular_dfs <- lapply(tabular_files, read_tabular_file)
combined_df <- Reduce(function(x, y) full_join(x, y, by = "Geneid"), tabular_dfs)
head(combined_df)
rownames(combined_df) <- combined_df$Geneid
combined_df <- combined_df[,-1]
# Converte os dados para uma matriz numérica
data <- as.matrix(combined_df)
storage.mode(data) <- "numeric"
# Remove as amostras indesejadas da matriz de contagem
data <- data[, !(colnames(data) %in% samples_to_remove)]
print(colnames(data))
###########################################
# 2. Leitura dos dados fenotípicos (phenoData)
###########################################
# Supondo que o arquivo Excel contenha as colunas "id", "SampleName" e "Treatment"
phenoData <- read_excel("./Deseq2/SRP009251 - Leishmania/SRP009251.xlsx", col_names = TRUE)
lista <- phenoData$id
# phenoData <- phenoData[,-1]
phenoData <- phenoData[,-1]# Remove a coluna "id"
rownames(phenoData) <- lista    # Define os nomes das linhas como os ids
# Remove as amostras indesejadas do phenoData
phenoData <- phenoData[!(phenoData$SampleName %in% samples_to_remove), ]
head(phenoData)
View(phenoData)
