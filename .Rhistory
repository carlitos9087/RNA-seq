return("Mus musculus")
} else {
stop("Organismo não reconhecido para os IDs fornecidos.")
}
}
library(DESeq2)
library(clusterProfiler)
library(org.Hs.eg.db)
library(org.Mm.eg.db)
library(openxlsx)
library(ggplot2)
library(enrichplot)
# Função para detectar o organismo com base nos IDs
detect_organism <- function(entrez_ids) {
hs_ids <- keys(org.Hs.eg.db, keytype = "ENTREZID")
mm_ids <- keys(org.Mm.eg.db, keytype = "ENTREZID")
if (any(entrez_ids %in% hs_ids)) {
return("Homo sapiens")
} else if (any(entrez_ids %in% mm_ids)) {
return("Mus musculus")
} else {
stop("Organismo não reconhecido para os IDs fornecidos.")
}
}
# Função para selecionar o banco de dados correto
select_orgDb <- function(gene_ids) {
organism <- detect_organism(gene_ids)
if (organism == "Homo sapiens") {
return(org.Hs.eg.db)
} else {
return(org.Mm.eg.db)
}
}
# Função principal para análise de enriquecimento
# Função principal para análise de enriquecimento
run_deseq_up_down_enrichment <- function(dds,
up_threshold   = 1,
down_threshold = -1,
padj_cutoff    = 0.05,
ontologies     = c("BP", "MF"),
pAdjustMethod  = "BH",
pvalueCutoff   = 0.05,
qvalueCutoff   = 0.2,
output_prefix) {
# (1) Extrai DEGs e salva em arquivo
degs <- run_deseq_up_down_analysis(dds,
up_threshold   = up_threshold,
down_threshold = down_threshold,
padj_cutoff    = padj_cutoff,
output_file    = paste0(output_prefix, "_DEGs.xlsx"))
up_ids   <- na.omit(as.character(degs$up$Entrez_ID))
down_ids <- na.omit(as.character(degs$down$Entrez_ID))
if (length(up_ids) == 0 && length(down_ids) == 0) {
stop("Nenhum gene upregulated ou downregulated encontrado para enriquecimento.")
}
# Determina o OrgDb
orgDb <- select_orgDb(unique(c(up_ids, down_ids)))
# Inicializa lista de resultados e workbook
enrich_results <- list()
wb <- createWorkbook()
for (ont in ontologies) {
# UPREGULATED
if (length(up_ids) > 0) {
ego_up <- tryCatch({
enrichGO(gene          = up_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
}, error = function(e) NULL)
if (!is.null(ego_up) && nrow(as.data.frame(ego_up)) > 0) {
enrich_results[[paste0("up_", ont)]] <- ego_up
sheet_up <- paste0("Up_", ont)
addWorksheet(wb, sheet_up)
writeData(wb, sheet_up, as.data.frame(ego_up))
pdf(paste0(output_prefix, "_", sheet_up, ".pdf"), width = 10, height = 8)
print(dotplot(ego_up, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Upregulated Genes")))
dev.off()
} else {
message("Nenhum termo enriquecido encontrado para genes upregulated (", ont, ").")
}
}
# DOWNREGULATED
if (length(down_ids) > 0) {
ego_down <- tryCatch({
enrichGO(gene          = down_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
}, error = function(e) NULL)
if (!is.null(ego_down) && nrow(as.data.frame(ego_down)) > 0) {
enrich_results[[paste0("down_", ont)]] <- ego_down
sheet_down <- paste0("Down_", ont)
addWorksheet(wb, sheet_down)
writeData(wb, sheet_down, as.data.frame(ego_down))
pdf(paste0(output_prefix, "_", sheet_down, ".pdf"), width = 10, height = 8)
print(dotplot(ego_down, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Downregulated Genes")))
dev.off()
} else {
message("Nenhum termo enriquecido encontrado para genes downregulated (", ont, ").")
}
}
}
# Salva workbook apenas se tiver conteúdo
if (length(wb$worksheets) > 0) {
saveWorkbook(wb, paste0(output_prefix, "_Enrichment_GO.xlsx"), overwrite = TRUE)
} else {
message("Nenhum resultado de enriquecimento foi salvo no Excel.")
}
message("GO enrichment (BP & MF) finalizado. Prefixo: ", output_prefix)
return(enrich_results)
}
# Função principal para análise de enriquecimento
run_deseq_up_down_enrichment <- function(dds,
up_threshold   = 1,
down_threshold = -1,
padj_cutoff    = 0.05,
ontologies     = c("BP", "MF"),
pAdjustMethod  = "BH",
pvalueCutoff   = 0.05,
qvalueCutoff   = 0.2,
output_prefix) {
# (1) Extrai DEGs e salva em arquivo
degs <- run_deseq_up_down_analysis(dds,
up_threshold   = up_threshold,
down_threshold = down_threshold,
padj_cutoff    = padj_cutoff,
output_file    = paste0(output_prefix, "_DEGs.xlsx"))
up_ids   <- na.omit(as.character(degs$up$Entrez_ID))
down_ids <- na.omit(as.character(degs$down$Entrez_ID))
if (length(up_ids) == 0 && length(down_ids) == 0) {
stop("Nenhum gene upregulated ou downregulated encontrado para enriquecimento.")
}
# Determina o OrgDb
orgDb <- select_orgDb(unique(c(up_ids, down_ids)))
# Inicializa lista de resultados e workbook
enrich_results <- list()
wb <- createWorkbook()
for (ont in ontologies) {
# UPREGULATED
if (length(up_ids) > 0) {
ego_up <- tryCatch({
enrichGO(gene          = up_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
}, error = function(e) NULL)
if (!is.null(ego_up) && nrow(as.data.frame(ego_up)) > 0) {
enrich_results[[paste0("up_", ont)]] <- ego_up
sheet_up <- paste0("Up_", ont)
addWorksheet(wb, sheet_up)
writeData(wb, sheet_up, as.data.frame(ego_up))
pdf(paste0(output_prefix, "_", sheet_up, ".pdf"), width = 10, height = 8)
print(dotplot(ego_up, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Upregulated Genes")))
dev.off()
} else {
message("Nenhum termo enriquecido encontrado para genes upregulated (", ont, ").")
}
}
# DOWNREGULATED
if (length(down_ids) > 0) {
ego_down <- tryCatch({
enrichGO(gene          = down_ids,
OrgDb         = orgDb,
keyType       = "ENTREZID",
ont           = ont,
pAdjustMethod = pAdjustMethod,
pvalueCutoff  = pvalueCutoff,
qvalueCutoff  = qvalueCutoff,
readable      = TRUE)
}, error = function(e) NULL)
if (!is.null(ego_down) && nrow(as.data.frame(ego_down)) > 0) {
enrich_results[[paste0("down_", ont)]] <- ego_down
sheet_down <- paste0("Down_", ont)
addWorksheet(wb, sheet_down)
writeData(wb, sheet_down, as.data.frame(ego_down))
pdf(paste0(output_prefix, "_", sheet_down, ".pdf"), width = 10, height = 8)
print(dotplot(ego_down, showCategory = 20) + ggtitle(paste("GO", ont, "Enrichment for Downregulated Genes")))
dev.off()
} else {
message("Nenhum termo enriquecido encontrado para genes downregulated (", ont, ").")
}
}
}
# Salva workbook apenas se tiver conteúdo
if (length(wb$worksheets) > 0) {
saveWorkbook(wb, paste0(output_prefix, "_Enrichment_GO.xlsx"), overwrite = TRUE)
} else {
message("Nenhum resultado de enriquecimento foi salvo no Excel.")
}
message("GO enrichment (BP & MF) finalizado. Prefixo: ", output_prefix)
return(enrich_results)
}
up_down_enrich_dds_control_vs_severe <- run_deseq_up_down_enrichment(
dds             = dds_control_vs_severe,
up_threshold    = 1,
down_threshold  = -1,
padj_cutoff     = 0.05,
ontologies      = c("BP","MF"),
pAdjustMethod   = "BH",
pvalueCutoff    = 0.05,
qvalueCutoff    = 0.2,
output_prefix = file.path(results_dir, "DESeq2_UpDown_control_vs_severe")
)
up_down_enrich_dds_control_vs_mild_moderate <- run_deseq_up_down_enrichment(
dds             = dds_control_vs_mild_moderate,
up_threshold    = 1,
down_threshold  = -1,
padj_cutoff     = 0.05,
ontologies      = c("BP","MF"),
pAdjustMethod   = "BH",
pvalueCutoff    = 0.05,
qvalueCutoff    = 0.2,
output_prefix = file.path(results_dir, "DESeq2_UpDown_control_vs_mild_moderate")
)
results_dir
results_dir
resultados <- list(
dds_control_vs_severe = up_down_enrich_dds_Uninfected_vs_SARS_CoV_2,
dds_control_vs_mild_moderate = up_down_enrich_dds_control_vs_mild_moderate
)
# Diretórios de saída correspondentes
diretorios_saida <- list(
dds_control_vs_severe = file.path(results_dir, "Enrichment_Analysis_UpDown_control_vs_severe"),
dds_control_vs_mild_moderate = file.path(results_dir, "Enrichment_Analysis_UpDown_control_vs_mild_moderate"),
)
# Alvos de interesse
targets <- c(
"NAT10","HAT1","KAT2A","KAT2B","KAT5","KAT6A","KAT6B",
"KAT7","KAT8","KAT12","GTF3C4","CREBBP","aTAT1","p300",
"HDAC1","HDAC2","HDAC3","HDAC4","HDAC5","HDAC6","HDAC7",
"HDAC8","HDAC9","HDAC10","SIRT1","SIRT2","SIRT3","SIRT4",
"SIRT5","SIRT6","SIRT7"
)
# Palavras-chave para filtragem
keywords <- c(
"acetyltransferase","acetylation","desacetylation",
"histone lysine","histone","methyltransferase",
"deacetylase","histone deacetylase",
"lysine acetyltransferase","lysine"
)
# Padrões regex para filtragem
pat_genes <- paste0("\\b(", paste(targets, collapse = "|"), ")\\b")
pat_keywords <- paste(keywords, collapse = "|")
targets_up <- toupper(targets)
library(dplyr)
library(stringr)
library(purrr)
library(openxlsx)
# Extrai apenas os genes-alvo de um geneID “A/B/C…”
extract_targets <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
found <- parts[toupper(parts) %in% targets_up]
if (length(found) == 0) NA_character_ else paste(found, collapse = "/")
}
# Reordena geneID colocando os alvos na frente
reorder_genes <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
tgt <- parts[toupper(parts) %in% targets_up]
other <- parts[!toupper(parts) %in% targets_up]
paste(c(tgt, other), collapse = "/")
}
# Filtra e anexa colunas comuns
filter_and_augment <- function(results_list, pattern, on_desc = TRUE) {
map_dfr(names(results_list), function(cat) {
df <- as.data.frame(results_list[[cat]])
df$original_row <- seq_len(nrow(df))
df %>%
mutate(category = cat) %>%
filter(
if (on_desc) str_detect(Description, regex(pattern, ignore_case = TRUE))
else         str_detect(geneID, regex(pattern, ignore_case = TRUE))
) %>%
mutate(
only_targets = vapply(geneID, extract_targets, FUN.VALUE = character(1)),
geneID_reorder = vapply(geneID, reorder_genes, FUN.VALUE = character(1))
)
})
}
# Escreve abas de um data.frame dividido por “category”
write_by_category <- function(df, path) {
wb <- createWorkbook()
df %>% split(.$category) %>%
iwalk(~{
addWorksheet(wb, .y)
writeData(wb, .y, .x)
})
saveWorkbook(wb, path, overwrite = TRUE)
}
# Itera sobre cada conjunto de resultados
walk(names(resultados), function(nome) {
resultado <- resultados[[nome]]
out_dir <- diretorios_saida[[nome]]
# Cria o diretório de saída, se não existir
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
# Define os caminhos dos arquivos de saída
terms_file <- file.path(out_dir, "enrichment_terms.xlsx")
targets_file <- file.path(out_dir, "enrichment_targets.xlsx")
combined_file <- file.path(out_dir, "enrichment_combined.xlsx")
# (A) Enriquecimento apenas por termos
df_terms <- filter_and_augment(resultado, pat_keywords, TRUE)
write_by_category(df_terms, terms_file)
# (B) Enriquecimento apenas por genes-alvo
df_targets <- filter_and_augment(resultado, pat_genes, FALSE)
write_by_category(df_targets, targets_file)
# (C) União (termos ∪ targets), sem duplicar entradas por category+ID
df_combined <- bind_rows(df_terms, df_targets) %>%
distinct(category, ID, .keep_all = TRUE)
write_by_category(df_combined, combined_file)
})
results_dir
up_down_enrich_dds_control_vs_severe
up_down_enrich_dds_control_vs_mild_moderate
results_dir
resultados <- list(
dds_control_vs_severe = up_down_enrich_dds_control_vs_severe,
dds_control_vs_mild_moderate = up_down_enrich_dds_control_vs_mild_moderate
)
# Diretórios de saída correspondentes
diretorios_saida <- list(
dds_control_vs_severe = file.path(results_dir, "Enrichment_Analysis_UpDown_control_vs_severe"),
dds_control_vs_mild_moderate = file.path(results_dir, "Enrichment_Analysis_UpDown_control_vs_mild_moderate"),
)
# Alvos de interesse
targets <- c(
"NAT10","HAT1","KAT2A","KAT2B","KAT5","KAT6A","KAT6B",
"KAT7","KAT8","KAT12","GTF3C4","CREBBP","aTAT1","p300",
"HDAC1","HDAC2","HDAC3","HDAC4","HDAC5","HDAC6","HDAC7",
"HDAC8","HDAC9","HDAC10","SIRT1","SIRT2","SIRT3","SIRT4",
"SIRT5","SIRT6","SIRT7"
)
# Palavras-chave para filtragem
keywords <- c(
"acetyltransferase","acetylation","desacetylation",
"histone lysine","histone","methyltransferase",
"deacetylase","histone deacetylase",
"lysine acetyltransferase","lysine"
)
# Padrões regex para filtragem
pat_genes <- paste0("\\b(", paste(targets, collapse = "|"), ")\\b")
pat_keywords <- paste(keywords, collapse = "|")
targets_up <- toupper(targets)
library(dplyr)
library(stringr)
library(purrr)
library(openxlsx)
# Extrai apenas os genes-alvo de um geneID “A/B/C…”
extract_targets <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
found <- parts[toupper(parts) %in% targets_up]
if (length(found) == 0) NA_character_ else paste(found, collapse = "/")
}
# Reordena geneID colocando os alvos na frente
reorder_genes <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
tgt <- parts[toupper(parts) %in% targets_up]
other <- parts[!toupper(parts) %in% targets_up]
paste(c(tgt, other), collapse = "/")
}
# Filtra e anexa colunas comuns
filter_and_augment <- function(results_list, pattern, on_desc = TRUE) {
map_dfr(names(results_list), function(cat) {
df <- as.data.frame(results_list[[cat]])
df$original_row <- seq_len(nrow(df))
df %>%
mutate(category = cat) %>%
filter(
if (on_desc) str_detect(Description, regex(pattern, ignore_case = TRUE))
else         str_detect(geneID, regex(pattern, ignore_case = TRUE))
) %>%
mutate(
only_targets = vapply(geneID, extract_targets, FUN.VALUE = character(1)),
geneID_reorder = vapply(geneID, reorder_genes, FUN.VALUE = character(1))
)
})
}
# Escreve abas de um data.frame dividido por “category”
write_by_category <- function(df, path) {
wb <- createWorkbook()
df %>% split(.$category) %>%
iwalk(~{
addWorksheet(wb, .y)
writeData(wb, .y, .x)
})
saveWorkbook(wb, path, overwrite = TRUE)
}
# Itera sobre cada conjunto de resultados
walk(names(resultados), function(nome) {
resultado <- resultados[[nome]]
out_dir <- diretorios_saida[[nome]]
# Cria o diretório de saída, se não existir
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
# Define os caminhos dos arquivos de saída
terms_file <- file.path(out_dir, "enrichment_terms.xlsx")
targets_file <- file.path(out_dir, "enrichment_targets.xlsx")
combined_file <- file.path(out_dir, "enrichment_combined.xlsx")
# (A) Enriquecimento apenas por termos
df_terms <- filter_and_augment(resultado, pat_keywords, TRUE)
write_by_category(df_terms, terms_file)
# (B) Enriquecimento apenas por genes-alvo
df_targets <- filter_and_augment(resultado, pat_genes, FALSE)
write_by_category(df_targets, targets_file)
# (C) União (termos ∪ targets), sem duplicar entradas por category+ID
df_combined <- bind_rows(df_terms, df_targets) %>%
distinct(category, ID, .keep_all = TRUE)
write_by_category(df_combined, combined_file)
})
results_dir
resultados <- list(
dds_control_vs_severe = up_down_enrich_dds_control_vs_severe,
dds_control_vs_mild_moderate = up_down_enrich_dds_control_vs_mild_moderate
)
# Diretórios de saída correspondentes
diretorios_saida <- list(
dds_control_vs_severe = file.path(results_dir, "Enrichment_Analysis_UpDown_control_vs_severe"),
dds_control_vs_mild_moderate = file.path(results_dir, "Enrichment_Analysis_UpDown_control_vs_mild_moderate")
)
# Alvos de interesse
targets <- c(
"NAT10","HAT1","KAT2A","KAT2B","KAT5","KAT6A","KAT6B",
"KAT7","KAT8","KAT12","GTF3C4","CREBBP","aTAT1","p300",
"HDAC1","HDAC2","HDAC3","HDAC4","HDAC5","HDAC6","HDAC7",
"HDAC8","HDAC9","HDAC10","SIRT1","SIRT2","SIRT3","SIRT4",
"SIRT5","SIRT6","SIRT7"
)
# Palavras-chave para filtragem
keywords <- c(
"acetyltransferase","acetylation","desacetylation",
"histone lysine","histone","methyltransferase",
"deacetylase","histone deacetylase",
"lysine acetyltransferase","lysine"
)
# Padrões regex para filtragem
pat_genes <- paste0("\\b(", paste(targets, collapse = "|"), ")\\b")
pat_keywords <- paste(keywords, collapse = "|")
targets_up <- toupper(targets)
library(dplyr)
library(stringr)
library(purrr)
library(openxlsx)
# Extrai apenas os genes-alvo de um geneID “A/B/C…”
extract_targets <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
found <- parts[toupper(parts) %in% targets_up]
if (length(found) == 0) NA_character_ else paste(found, collapse = "/")
}
# Reordena geneID colocando os alvos na frente
reorder_genes <- function(geneID) {
parts <- str_split(geneID, "/", simplify = TRUE)
tgt <- parts[toupper(parts) %in% targets_up]
other <- parts[!toupper(parts) %in% targets_up]
paste(c(tgt, other), collapse = "/")
}
# Filtra e anexa colunas comuns
filter_and_augment <- function(results_list, pattern, on_desc = TRUE) {
map_dfr(names(results_list), function(cat) {
df <- as.data.frame(results_list[[cat]])
df$original_row <- seq_len(nrow(df))
df %>%
mutate(category = cat) %>%
filter(
if (on_desc) str_detect(Description, regex(pattern, ignore_case = TRUE))
else         str_detect(geneID, regex(pattern, ignore_case = TRUE))
) %>%
mutate(
only_targets = vapply(geneID, extract_targets, FUN.VALUE = character(1)),
geneID_reorder = vapply(geneID, reorder_genes, FUN.VALUE = character(1))
)
})
}
# Escreve abas de um data.frame dividido por “category”
write_by_category <- function(df, path) {
wb <- createWorkbook()
df %>% split(.$category) %>%
iwalk(~{
addWorksheet(wb, .y)
writeData(wb, .y, .x)
})
saveWorkbook(wb, path, overwrite = TRUE)
}
# Itera sobre cada conjunto de resultados
walk(names(resultados), function(nome) {
resultado <- resultados[[nome]]
out_dir <- diretorios_saida[[nome]]
# Cria o diretório de saída, se não existir
dir.create(out_dir, showWarnings = FALSE, recursive = TRUE)
# Define os caminhos dos arquivos de saída
terms_file <- file.path(out_dir, "enrichment_terms.xlsx")
targets_file <- file.path(out_dir, "enrichment_targets.xlsx")
combined_file <- file.path(out_dir, "enrichment_combined.xlsx")
# (A) Enriquecimento apenas por termos
df_terms <- filter_and_augment(resultado, pat_keywords, TRUE)
write_by_category(df_terms, terms_file)
# (B) Enriquecimento apenas por genes-alvo
df_targets <- filter_and_augment(resultado, pat_genes, FALSE)
write_by_category(df_targets, targets_file)
# (C) União (termos ∪ targets), sem duplicar entradas por category+ID
df_combined <- bind_rows(df_terms, df_targets) %>%
distinct(category, ID, .keep_all = TRUE)
write_by_category(df_combined, combined_file)
})
